
FreeRTOS_Assignment-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d0c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e84  08003e84  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003e84  08003e84  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e84  08003e84  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e4  20000060  08003eec  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001244  08003eec  00021244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106d8  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002943  00000000  00000000  000307a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  000330e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be9  00000000  00000000  00034030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f7c  00000000  00000000  00034c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011fcc  00000000  00000000  0004db95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091ea2  00000000  00000000  0005fb61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004248  00000000  00000000  000f1a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f5c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08003e04 	.word	0x08003e04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08003e04 	.word	0x08003e04

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000164:	b480      	push	{r7}
 8000166:	b085      	sub	sp, #20
 8000168:	af00      	add	r7, sp, #0
 800016a:	60f8      	str	r0, [r7, #12]
 800016c:	60b9      	str	r1, [r7, #8]
 800016e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	4a06      	ldr	r2, [pc, #24]	; (800018c <vApplicationGetIdleTaskMemory+0x28>)
 8000174:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000176:	68bb      	ldr	r3, [r7, #8]
 8000178:	4a05      	ldr	r2, [pc, #20]	; (8000190 <vApplicationGetIdleTaskMemory+0x2c>)
 800017a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2280      	movs	r2, #128	; 0x80
 8000180:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000182:	bf00      	nop
 8000184:	3714      	adds	r7, #20
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	2000007c 	.word	0x2000007c
 8000190:	2000011c 	.word	0x2000011c

08000194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800019a:	f000 fb05 	bl	80007a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019e:	f000 f83b 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a2:	f000 f89f 	bl	80002e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a6:	f000 f873 	bl	8000290 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  xQueue = xQueueCreate(QUEUE_LENGTH, ITEM_SIZE);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2104      	movs	r1, #4
 80001ae:	200a      	movs	r0, #10
 80001b0:	f001 ff58 	bl	8002064 <xQueueGenericCreate>
 80001b4:	4603      	mov	r3, r0
 80001b6:	4a11      	ldr	r2, [pc, #68]	; (80001fc <main+0x68>)
 80001b8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  xTaskCreate(LED_Task, "LED Task", 128, NULL, 1, NULL);
 80001ba:	2300      	movs	r3, #0
 80001bc:	9301      	str	r3, [sp, #4]
 80001be:	2301      	movs	r3, #1
 80001c0:	9300      	str	r3, [sp, #0]
 80001c2:	2300      	movs	r3, #0
 80001c4:	2280      	movs	r2, #128	; 0x80
 80001c6:	490e      	ldr	r1, [pc, #56]	; (8000200 <main+0x6c>)
 80001c8:	480e      	ldr	r0, [pc, #56]	; (8000204 <main+0x70>)
 80001ca:	f002 faf3 	bl	80027b4 <xTaskCreate>
  xTaskCreate(BUTTON_Task, "Button Task", 128, NULL, 1, NULL);
 80001ce:	2300      	movs	r3, #0
 80001d0:	9301      	str	r3, [sp, #4]
 80001d2:	2301      	movs	r3, #1
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2300      	movs	r3, #0
 80001d8:	2280      	movs	r2, #128	; 0x80
 80001da:	490b      	ldr	r1, [pc, #44]	; (8000208 <main+0x74>)
 80001dc:	480b      	ldr	r0, [pc, #44]	; (800020c <main+0x78>)
 80001de:	f002 fae9 	bl	80027b4 <xTaskCreate>
  xTaskCreate(UART_Task, "UART Task", 128, NULL, 1, NULL);
 80001e2:	2300      	movs	r3, #0
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	2301      	movs	r3, #1
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2300      	movs	r3, #0
 80001ec:	2280      	movs	r2, #128	; 0x80
 80001ee:	4908      	ldr	r1, [pc, #32]	; (8000210 <main+0x7c>)
 80001f0:	4808      	ldr	r0, [pc, #32]	; (8000214 <main+0x80>)
 80001f2:	f002 fadf 	bl	80027b4 <xTaskCreate>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80001f6:	f002 fc57 	bl	8002aa8 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fa:	e7fe      	b.n	80001fa <main+0x66>
 80001fc:	20000364 	.word	0x20000364
 8000200:	08003e1c 	.word	0x08003e1c
 8000204:	08000399 	.word	0x08000399
 8000208:	08003e28 	.word	0x08003e28
 800020c:	08000425 	.word	0x08000425
 8000210:	08003e34 	.word	0x08003e34
 8000214:	0800047d 	.word	0x0800047d

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	; 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fcf2 	bl	8003c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000246:	2300      	movs	r3, #0
 8000248:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fd88 	bl	8000d64 <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800025a:	f000 f951 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fff6 	bl	8001268 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000282:	f000 f93d 	bl	8000500 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_USART1_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c8:	f001 fbd6 	bl	8001a78 <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 f915 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	2000031c 	.word	0x2000031c
 80002e0:	40013800 	.word	0x40013800

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b24      	ldr	r3, [pc, #144]	; (800038c <MX_GPIO_Init+0xa8>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a23      	ldr	r2, [pc, #140]	; (800038c <MX_GPIO_Init+0xa8>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b21      	ldr	r3, [pc, #132]	; (800038c <MX_GPIO_Init+0xa8>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b1e      	ldr	r3, [pc, #120]	; (800038c <MX_GPIO_Init+0xa8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a1d      	ldr	r2, [pc, #116]	; (800038c <MX_GPIO_Init+0xa8>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <MX_GPIO_Init+0xa8>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <MX_GPIO_Init+0xa8>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a17      	ldr	r2, [pc, #92]	; (800038c <MX_GPIO_Init+0xa8>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_GPIO_Init+0xa8>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	4812      	ldr	r0, [pc, #72]	; (8000390 <MX_GPIO_Init+0xac>)
 8000348:	f000 fcdb 	bl	8000d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800034c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	480a      	ldr	r0, [pc, #40]	; (8000390 <MX_GPIO_Init+0xac>)
 8000366:	f000 fb31 	bl	80009cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800036a:	2308      	movs	r3, #8
 800036c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	4619      	mov	r1, r3
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_GPIO_Init+0xb0>)
 800037e:	f000 fb25 	bl	80009cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000382:	bf00      	nop
 8000384:	3720      	adds	r7, #32
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000
 8000390:	40011000 	.word	0x40011000
 8000394:	40010800 	.word	0x40010800

08000398 <LED_Task>:

/* USER CODE BEGIN 4 */
void LED_Task(void *pvParameters)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
    char *message;
    for (;;) {
        if (xQueueReceive(xQueue, &message, portMAX_DELAY) == pdPASS) {
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <LED_Task+0x78>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f107 010c 	add.w	r1, r7, #12
 80003a8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 ffb5 	bl	800231c <xQueueReceive>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d1f3      	bne.n	80003a0 <LED_Task+0x8>
            if (strcmp(message, "TOGGLE") == 0) {
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	4916      	ldr	r1, [pc, #88]	; (8000414 <LED_Task+0x7c>)
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff fec7 	bl	8000150 <strcmp>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d105      	bne.n	80003d4 <LED_Task+0x3c>
                HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
 80003c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003cc:	4812      	ldr	r0, [pc, #72]	; (8000418 <LED_Task+0x80>)
 80003ce:	f000 fcb0 	bl	8000d32 <HAL_GPIO_TogglePin>
 80003d2:	e7e5      	b.n	80003a0 <LED_Task+0x8>
            } else if (strcmp(message, "ON") == 0) {
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	4911      	ldr	r1, [pc, #68]	; (800041c <LED_Task+0x84>)
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff feb9 	bl	8000150 <strcmp>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d106      	bne.n	80003f2 <LED_Task+0x5a>
                HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ea:	480b      	ldr	r0, [pc, #44]	; (8000418 <LED_Task+0x80>)
 80003ec:	f000 fc89 	bl	8000d02 <HAL_GPIO_WritePin>
 80003f0:	e7d6      	b.n	80003a0 <LED_Task+0x8>
            } else if (strcmp(message, "OFF") == 0) {
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	490a      	ldr	r1, [pc, #40]	; (8000420 <LED_Task+0x88>)
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff feaa 	bl	8000150 <strcmp>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1ce      	bne.n	80003a0 <LED_Task+0x8>
                HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000408:	4803      	ldr	r0, [pc, #12]	; (8000418 <LED_Task+0x80>)
 800040a:	f000 fc7a 	bl	8000d02 <HAL_GPIO_WritePin>
        if (xQueueReceive(xQueue, &message, portMAX_DELAY) == pdPASS) {
 800040e:	e7c7      	b.n	80003a0 <LED_Task+0x8>
 8000410:	20000364 	.word	0x20000364
 8000414:	08003e40 	.word	0x08003e40
 8000418:	40011000 	.word	0x40011000
 800041c:	08003e48 	.word	0x08003e48
 8000420:	08003e4c 	.word	0x08003e4c

08000424 <BUTTON_Task>:
        }
    }
}

void BUTTON_Task(void *pvParameters)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    static GPIO_PinState lastState = GPIO_PIN_RESET;
    GPIO_PinState currentState;
    for (;;) {
        currentState = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_PIN);
 800042c:	2108      	movs	r1, #8
 800042e:	480f      	ldr	r0, [pc, #60]	; (800046c <BUTTON_Task+0x48>)
 8000430:	f000 fc50 	bl	8000cd4 <HAL_GPIO_ReadPin>
 8000434:	4603      	mov	r3, r0
 8000436:	73fb      	strb	r3, [r7, #15]
        if (currentState != lastState) {
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <BUTTON_Task+0x4c>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	7bfa      	ldrb	r2, [r7, #15]
 800043e:	429a      	cmp	r2, r3
 8000440:	d00f      	beq.n	8000462 <BUTTON_Task+0x3e>
            if (currentState == GPIO_PIN_SET) {
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d109      	bne.n	800045c <BUTTON_Task+0x38>
                char *msg = "TOGGLE";
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <BUTTON_Task+0x50>)
 800044a:	60bb      	str	r3, [r7, #8]
                xQueueSend(xQueue, &msg, 0);
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <BUTTON_Task+0x54>)
 800044e:	6818      	ldr	r0, [r3, #0]
 8000450:	f107 0108 	add.w	r1, r7, #8
 8000454:	2300      	movs	r3, #0
 8000456:	2200      	movs	r2, #0
 8000458:	f001 fe62 	bl	8002120 <xQueueGenericSend>
            }
            lastState = currentState;
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <BUTTON_Task+0x4c>)
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	7013      	strb	r3, [r2, #0]
        }
        vTaskDelay(pdMS_TO_TICKS(50));
 8000462:	2032      	movs	r0, #50	; 0x32
 8000464:	f002 faec 	bl	8002a40 <vTaskDelay>
        currentState = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_PIN);
 8000468:	e7e0      	b.n	800042c <BUTTON_Task+0x8>
 800046a:	bf00      	nop
 800046c:	40010800 	.word	0x40010800
 8000470:	20000368 	.word	0x20000368
 8000474:	08003e40 	.word	0x08003e40
 8000478:	20000364 	.word	0x20000364

0800047c <UART_Task>:
    }
}

void UART_Task(void *pvParameters)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
    char *uartMsg;
    char recvChar;
    for (;;) {
        if (HAL_UART_Receive(&huart1, (uint8_t *)&recvChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000484:	f107 010b 	add.w	r1, r7, #11
 8000488:	f04f 33ff 	mov.w	r3, #4294967295
 800048c:	2201      	movs	r2, #1
 800048e:	4811      	ldr	r0, [pc, #68]	; (80004d4 <UART_Task+0x58>)
 8000490:	f001 fb42 	bl	8001b18 <HAL_UART_Receive>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1f4      	bne.n	8000484 <UART_Task+0x8>
            switch(recvChar) {
 800049a:	7afb      	ldrb	r3, [r7, #11]
 800049c:	2b0a      	cmp	r3, #10
 800049e:	d001      	beq.n	80004a4 <UART_Task+0x28>
 80004a0:	2b0d      	cmp	r3, #13
 80004a2:	d10d      	bne.n	80004c0 <UART_Task+0x44>
                case '\r':
                case '\n':
                    if (uartMsg != NULL) {
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d012      	beq.n	80004d0 <UART_Task+0x54>
                        xQueueSend(xQueue, &uartMsg, 0);
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <UART_Task+0x5c>)
 80004ac:	6818      	ldr	r0, [r3, #0]
 80004ae:	f107 010c 	add.w	r1, r7, #12
 80004b2:	2300      	movs	r3, #0
 80004b4:	2200      	movs	r2, #0
 80004b6:	f001 fe33 	bl	8002120 <xQueueGenericSend>
                        uartMsg = NULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
                    }
                    break;
 80004be:	e007      	b.n	80004d0 <UART_Task+0x54>
                default:
                    // Accumulate characters to form a command word
                    strncat(uartMsg, &recvChar, 1);
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f107 010b 	add.w	r1, r7, #11
 80004c6:	2201      	movs	r2, #1
 80004c8:	4618      	mov	r0, r3
 80004ca:	f003 fba9 	bl	8003c20 <strncat>
                    break;
 80004ce:	e000      	b.n	80004d2 <UART_Task+0x56>
                    break;
 80004d0:	bf00      	nop
        if (HAL_UART_Receive(&huart1, (uint8_t *)&recvChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 80004d2:	e7d7      	b.n	8000484 <UART_Task+0x8>
 80004d4:	2000031c 	.word	0x2000031c
 80004d8:	20000364 	.word	0x20000364

080004dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d101      	bne.n	80004f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ee:	f000 f971 	bl	80007d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40000800 	.word	0x40000800

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	e7fe      	b.n	8000508 <Error_Handler+0x8>
	...

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000512:	4b18      	ldr	r3, [pc, #96]	; (8000574 <HAL_MspInit+0x68>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a17      	ldr	r2, [pc, #92]	; (8000574 <HAL_MspInit+0x68>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <HAL_MspInit+0x68>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_MspInit+0x68>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a11      	ldr	r2, [pc, #68]	; (8000574 <HAL_MspInit+0x68>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <HAL_MspInit+0x68>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	210f      	movs	r1, #15
 8000546:	f06f 0001 	mvn.w	r0, #1
 800054a:	f000 fa14 	bl	8000976 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <HAL_MspInit+0x6c>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_MspInit+0x6c>)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000
 8000578:	40010000 	.word	0x40010000

0800057c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <HAL_UART_MspInit+0x8c>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d131      	bne.n	8000600 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <HAL_UART_MspInit+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a1a      	ldr	r2, [pc, #104]	; (800060c <HAL_UART_MspInit+0x90>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_UART_MspInit+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_UART_MspInit+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <HAL_UART_MspInit+0x90>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_UART_MspInit+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	2303      	movs	r3, #3
 80005d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <HAL_UART_MspInit+0x94>)
 80005e2:	f000 f9f3 	bl	80009cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4619      	mov	r1, r3
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <HAL_UART_MspInit+0x94>)
 80005fc:	f000 f9e6 	bl	80009cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40013800 	.word	0x40013800
 800060c:	40021000 	.word	0x40021000
 8000610:	40010800 	.word	0x40010800

08000614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08e      	sub	sp, #56	; 0x38
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800061c:	2300      	movs	r3, #0
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000620:	2300      	movs	r3, #0
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <HAL_InitTick+0xe8>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a33      	ldr	r2, [pc, #204]	; (80006fc <HAL_InitTick+0xe8>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <HAL_InitTick+0xe8>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000642:	f107 0210 	add.w	r2, r7, #16
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f000 ff7b 	bl	8001548 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000658:	2b00      	cmp	r3, #0
 800065a:	d103      	bne.n	8000664 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800065c:	f000 ff4c 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8000660:	6378      	str	r0, [r7, #52]	; 0x34
 8000662:	e004      	b.n	800066e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000664:	f000 ff48 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8000668:	4603      	mov	r3, r0
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800066e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <HAL_InitTick+0xec>)
 8000672:	fba2 2303 	umull	r2, r3, r2, r3
 8000676:	0c9b      	lsrs	r3, r3, #18
 8000678:	3b01      	subs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <HAL_InitTick+0xf0>)
 800067e:	4a22      	ldr	r2, [pc, #136]	; (8000708 <HAL_InitTick+0xf4>)
 8000680:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <HAL_InitTick+0xf0>)
 8000684:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000688:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800068a:	4a1e      	ldr	r2, [pc, #120]	; (8000704 <HAL_InitTick+0xf0>)
 800068c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800068e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <HAL_InitTick+0xf0>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <HAL_InitTick+0xf0>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <HAL_InitTick+0xf0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80006a2:	4818      	ldr	r0, [pc, #96]	; (8000704 <HAL_InitTick+0xf0>)
 80006a4:	f000 ff9e 	bl	80015e4 <HAL_TIM_Base_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80006b6:	4813      	ldr	r0, [pc, #76]	; (8000704 <HAL_InitTick+0xf0>)
 80006b8:	f000 ffec 	bl	8001694 <HAL_TIM_Base_Start_IT>
 80006bc:	4603      	mov	r3, r0
 80006be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d111      	bne.n	80006ee <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006ca:	201e      	movs	r0, #30
 80006cc:	f000 f96f 	bl	80009ae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b0f      	cmp	r3, #15
 80006d4:	d808      	bhi.n	80006e8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80006d6:	2200      	movs	r2, #0
 80006d8:	6879      	ldr	r1, [r7, #4]
 80006da:	201e      	movs	r0, #30
 80006dc:	f000 f94b 	bl	8000976 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e0:	4a0a      	ldr	r2, [pc, #40]	; (800070c <HAL_InitTick+0xf8>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	e002      	b.n	80006ee <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3738      	adds	r7, #56	; 0x38
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	431bde83 	.word	0x431bde83
 8000704:	2000036c 	.word	0x2000036c
 8000708:	40000800 	.word	0x40000800
 800070c:	20000004 	.word	0x20000004

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
	...

0800073c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <TIM4_IRQHandler+0x10>)
 8000742:	f000 fff9 	bl	8001738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000036c 	.word	0x2000036c

08000750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800075c:	f7ff fff8 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000762:	490c      	ldr	r1, [pc, #48]	; (8000794 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000764:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000778:	4c09      	ldr	r4, [pc, #36]	; (80007a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000786:	f003 fab5 	bl	8003cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078a:	f7ff fd03 	bl	8000194 <main>
  bx lr
 800078e:	4770      	bx	lr
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000798:	08003e8c 	.word	0x08003e8c
  ldr r2, =_sbss
 800079c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007a0:	20001244 	.word	0x20001244

080007a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_2_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_Init+0x28>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_Init+0x28>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f8d1 	bl	8000960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	200f      	movs	r0, #15
 80007c0:	f7ff ff28 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c4:	f7ff fea2 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40022000 	.word	0x40022000

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x1c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x20>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a03      	ldr	r2, [pc, #12]	; (80007f4 <HAL_IncTick+0x20>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	20000008 	.word	0x20000008
 80007f4:	200003b4 	.word	0x200003b4

080007f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_GetTick+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	200003b4 	.word	0x200003b4

0800080c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083e:	4a04      	ldr	r2, [pc, #16]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	60d3      	str	r3, [r2, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_GetPriorityGrouping+0x18>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	f003 0307 	and.w	r3, r3, #7
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	2b00      	cmp	r3, #0
 8000880:	db0b      	blt.n	800089a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f003 021f 	and.w	r2, r3, #31
 8000888:	4906      	ldr	r1, [pc, #24]	; (80008a4 <__NVIC_EnableIRQ+0x34>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	2001      	movs	r0, #1
 8000892:	fa00 f202 	lsl.w	r2, r0, r2
 8000896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	e000e100 	.word	0xe000e100

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	; (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2b04      	cmp	r3, #4
 8000918:	bf28      	it	cs
 800091a:	2304      	movcs	r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3304      	adds	r3, #4
 8000922:	2b06      	cmp	r3, #6
 8000924:	d902      	bls.n	800092c <NVIC_EncodePriority+0x30>
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3b03      	subs	r3, #3
 800092a:	e000      	b.n	800092e <NVIC_EncodePriority+0x32>
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	f04f 32ff 	mov.w	r2, #4294967295
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43da      	mvns	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	401a      	ands	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	f04f 31ff 	mov.w	r1, #4294967295
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43d9      	mvns	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	4313      	orrs	r3, r2
         );
}
 8000956:	4618      	mov	r0, r3
 8000958:	3724      	adds	r7, #36	; 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ff4f 	bl	800080c <__NVIC_SetPriorityGrouping>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000976:	b580      	push	{r7, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000988:	f7ff ff64 	bl	8000854 <__NVIC_GetPriorityGrouping>
 800098c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff ffb2 	bl	80008fc <NVIC_EncodePriority>
 8000998:	4602      	mov	r2, r0
 800099a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff81 	bl	80008a8 <__NVIC_SetPriority>
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff57 	bl	8000870 <__NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b08b      	sub	sp, #44	; 0x2c
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009de:	e169      	b.n	8000cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009e0:	2201      	movs	r2, #1
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	4013      	ands	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	f040 8158 	bne.w	8000cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	4a9a      	ldr	r2, [pc, #616]	; (8000c6c <HAL_GPIO_Init+0x2a0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d05e      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a08:	4a98      	ldr	r2, [pc, #608]	; (8000c6c <HAL_GPIO_Init+0x2a0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d875      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a0e:	4a98      	ldr	r2, [pc, #608]	; (8000c70 <HAL_GPIO_Init+0x2a4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d058      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a14:	4a96      	ldr	r2, [pc, #600]	; (8000c70 <HAL_GPIO_Init+0x2a4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d86f      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a1a:	4a96      	ldr	r2, [pc, #600]	; (8000c74 <HAL_GPIO_Init+0x2a8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d052      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a20:	4a94      	ldr	r2, [pc, #592]	; (8000c74 <HAL_GPIO_Init+0x2a8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d869      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a26:	4a94      	ldr	r2, [pc, #592]	; (8000c78 <HAL_GPIO_Init+0x2ac>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d04c      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a2c:	4a92      	ldr	r2, [pc, #584]	; (8000c78 <HAL_GPIO_Init+0x2ac>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d863      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a32:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <HAL_GPIO_Init+0x2b0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d046      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a38:	4a90      	ldr	r2, [pc, #576]	; (8000c7c <HAL_GPIO_Init+0x2b0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d85d      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a3e:	2b12      	cmp	r3, #18
 8000a40:	d82a      	bhi.n	8000a98 <HAL_GPIO_Init+0xcc>
 8000a42:	2b12      	cmp	r3, #18
 8000a44:	d859      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a46:	a201      	add	r2, pc, #4	; (adr r2, 8000a4c <HAL_GPIO_Init+0x80>)
 8000a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4c:	08000ac7 	.word	0x08000ac7
 8000a50:	08000aa1 	.word	0x08000aa1
 8000a54:	08000ab3 	.word	0x08000ab3
 8000a58:	08000af5 	.word	0x08000af5
 8000a5c:	08000afb 	.word	0x08000afb
 8000a60:	08000afb 	.word	0x08000afb
 8000a64:	08000afb 	.word	0x08000afb
 8000a68:	08000afb 	.word	0x08000afb
 8000a6c:	08000afb 	.word	0x08000afb
 8000a70:	08000afb 	.word	0x08000afb
 8000a74:	08000afb 	.word	0x08000afb
 8000a78:	08000afb 	.word	0x08000afb
 8000a7c:	08000afb 	.word	0x08000afb
 8000a80:	08000afb 	.word	0x08000afb
 8000a84:	08000afb 	.word	0x08000afb
 8000a88:	08000afb 	.word	0x08000afb
 8000a8c:	08000afb 	.word	0x08000afb
 8000a90:	08000aa9 	.word	0x08000aa9
 8000a94:	08000abd 	.word	0x08000abd
 8000a98:	4a79      	ldr	r2, [pc, #484]	; (8000c80 <HAL_GPIO_Init+0x2b4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d013      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a9e:	e02c      	b.n	8000afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e029      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	3304      	adds	r3, #4
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e024      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e01f      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	330c      	adds	r3, #12
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e01a      	b.n	8000afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e013      	b.n	8000afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d105      	bne.n	8000ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	611a      	str	r2, [r3, #16]
          break;
 8000ae6:	e009      	b.n	8000afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	615a      	str	r2, [r3, #20]
          break;
 8000af2:	e003      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e000      	b.n	8000afc <HAL_GPIO_Init+0x130>
          break;
 8000afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d801      	bhi.n	8000b06 <HAL_GPIO_Init+0x13a>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	e001      	b.n	8000b0a <HAL_GPIO_Init+0x13e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2bff      	cmp	r3, #255	; 0xff
 8000b10:	d802      	bhi.n	8000b18 <HAL_GPIO_Init+0x14c>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	e002      	b.n	8000b1e <HAL_GPIO_Init+0x152>
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	3b08      	subs	r3, #8
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	210f      	movs	r1, #15
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	401a      	ands	r2, r3
 8000b30:	6a39      	ldr	r1, [r7, #32]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 80b1 	beq.w	8000cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4c:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b64:	4a48      	ldr	r2, [pc, #288]	; (8000c88 <HAL_GPIO_Init+0x2bc>)
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <HAL_GPIO_Init+0x2c0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d013      	beq.n	8000bb8 <HAL_GPIO_Init+0x1ec>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a3f      	ldr	r2, [pc, #252]	; (8000c90 <HAL_GPIO_Init+0x2c4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d00d      	beq.n	8000bb4 <HAL_GPIO_Init+0x1e8>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a3e      	ldr	r2, [pc, #248]	; (8000c94 <HAL_GPIO_Init+0x2c8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d007      	beq.n	8000bb0 <HAL_GPIO_Init+0x1e4>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a3d      	ldr	r2, [pc, #244]	; (8000c98 <HAL_GPIO_Init+0x2cc>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d101      	bne.n	8000bac <HAL_GPIO_Init+0x1e0>
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e006      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bac:	2304      	movs	r3, #4
 8000bae:	e004      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bbc:	f002 0203 	and.w	r2, r2, #3
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	4093      	lsls	r3, r2
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bca:	492f      	ldr	r1, [pc, #188]	; (8000c88 <HAL_GPIO_Init+0x2bc>)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d006      	beq.n	8000bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	492c      	ldr	r1, [pc, #176]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	608b      	str	r3, [r1, #8]
 8000bf0:	e006      	b.n	8000c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	4928      	ldr	r1, [pc, #160]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d006      	beq.n	8000c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	4922      	ldr	r1, [pc, #136]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60cb      	str	r3, [r1, #12]
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	491e      	ldr	r1, [pc, #120]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	4918      	ldr	r1, [pc, #96]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	604b      	str	r3, [r1, #4]
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4914      	ldr	r1, [pc, #80]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d021      	beq.n	8000ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	490e      	ldr	r1, [pc, #56]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
 8000c68:	e021      	b.n	8000cae <HAL_GPIO_Init+0x2e2>
 8000c6a:	bf00      	nop
 8000c6c:	10320000 	.word	0x10320000
 8000c70:	10310000 	.word	0x10310000
 8000c74:	10220000 	.word	0x10220000
 8000c78:	10210000 	.word	0x10210000
 8000c7c:	10120000 	.word	0x10120000
 8000c80:	10110000 	.word	0x10110000
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010000 	.word	0x40010000
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40011000 	.word	0x40011000
 8000c98:	40011400 	.word	0x40011400
 8000c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_GPIO_Init+0x304>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4909      	ldr	r1, [pc, #36]	; (8000cd0 <HAL_GPIO_Init+0x304>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f47f ae8e 	bne.w	80009e0 <HAL_GPIO_Init+0x14>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	372c      	adds	r7, #44	; 0x2c
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d002      	beq.n	8000cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e001      	b.n	8000cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr

08000d02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	807b      	strh	r3, [r7, #2]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d12:	787b      	ldrb	r3, [r7, #1]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d18:	887a      	ldrh	r2, [r7, #2]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d1e:	e003      	b.n	8000d28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	041a      	lsls	r2, r3, #16
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	611a      	str	r2, [r3, #16]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d44:	887a      	ldrh	r2, [r7, #2]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	041a      	lsls	r2, r3, #16
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	400b      	ands	r3, r1
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	611a      	str	r2, [r3, #16]
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e272      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 8087 	beq.w	8000e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d84:	4b92      	ldr	r3, [pc, #584]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 030c 	and.w	r3, r3, #12
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d00c      	beq.n	8000daa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d90:	4b8f      	ldr	r3, [pc, #572]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 030c 	and.w	r3, r3, #12
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d112      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x5e>
 8000d9c:	4b8c      	ldr	r3, [pc, #560]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da8:	d10b      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000daa:	4b89      	ldr	r3, [pc, #548]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d06c      	beq.n	8000e90 <HAL_RCC_OscConfig+0x12c>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d168      	bne.n	8000e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e24c      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dca:	d106      	bne.n	8000dda <HAL_RCC_OscConfig+0x76>
 8000dcc:	4b80      	ldr	r3, [pc, #512]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a7f      	ldr	r2, [pc, #508]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e02e      	b.n	8000e38 <HAL_RCC_OscConfig+0xd4>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x98>
 8000de2:	4b7b      	ldr	r3, [pc, #492]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a7a      	ldr	r2, [pc, #488]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	4b78      	ldr	r3, [pc, #480]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a77      	ldr	r2, [pc, #476]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e01d      	b.n	8000e38 <HAL_RCC_OscConfig+0xd4>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e04:	d10c      	bne.n	8000e20 <HAL_RCC_OscConfig+0xbc>
 8000e06:	4b72      	ldr	r3, [pc, #456]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a71      	ldr	r2, [pc, #452]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	4b6f      	ldr	r3, [pc, #444]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a6e      	ldr	r2, [pc, #440]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	e00b      	b.n	8000e38 <HAL_RCC_OscConfig+0xd4>
 8000e20:	4b6b      	ldr	r3, [pc, #428]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a6a      	ldr	r2, [pc, #424]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4b68      	ldr	r3, [pc, #416]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a67      	ldr	r2, [pc, #412]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d013      	beq.n	8000e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e40:	f7ff fcda 	bl	80007f8 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e48:	f7ff fcd6 	bl	80007f8 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b64      	cmp	r3, #100	; 0x64
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e200      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f0      	beq.n	8000e48 <HAL_RCC_OscConfig+0xe4>
 8000e66:	e014      	b.n	8000e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fcc6 	bl	80007f8 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e70:	f7ff fcc2 	bl	80007f8 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b64      	cmp	r3, #100	; 0x64
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e1ec      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e82:	4b53      	ldr	r3, [pc, #332]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f0      	bne.n	8000e70 <HAL_RCC_OscConfig+0x10c>
 8000e8e:	e000      	b.n	8000e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d063      	beq.n	8000f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e9e:	4b4c      	ldr	r3, [pc, #304]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00b      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eaa:	4b49      	ldr	r3, [pc, #292]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d11c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x18c>
 8000eb6:	4b46      	ldr	r3, [pc, #280]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d116      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec2:	4b43      	ldr	r3, [pc, #268]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d005      	beq.n	8000eda <HAL_RCC_OscConfig+0x176>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d001      	beq.n	8000eda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e1c0      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eda:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	4939      	ldr	r1, [pc, #228]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eee:	e03a      	b.n	8000f66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d020      	beq.n	8000f3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <HAL_RCC_OscConfig+0x270>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efe:	f7ff fc7b 	bl	80007f8 <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	e008      	b.n	8000f18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f06:	f7ff fc77 	bl	80007f8 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e1a1      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f18:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f0      	beq.n	8000f06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4927      	ldr	r1, [pc, #156]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	4313      	orrs	r3, r2
 8000f36:	600b      	str	r3, [r1, #0]
 8000f38:	e015      	b.n	8000f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <HAL_RCC_OscConfig+0x270>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fc5a 	bl	80007f8 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f48:	f7ff fc56 	bl	80007f8 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e180      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f0      	bne.n	8000f48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d03a      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d019      	beq.n	8000fae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_RCC_OscConfig+0x274>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f80:	f7ff fc3a 	bl	80007f8 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f88:	f7ff fc36 	bl	80007f8 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e160      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fafe 	bl	80015a8 <RCC_Delay>
 8000fac:	e01c      	b.n	8000fe8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_RCC_OscConfig+0x274>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fc20 	bl	80007f8 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fba:	e00f      	b.n	8000fdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fc1c 	bl	80007f8 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d908      	bls.n	8000fdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e146      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	42420000 	.word	0x42420000
 8000fd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fdc:	4b92      	ldr	r3, [pc, #584]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1e9      	bne.n	8000fbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80a6 	beq.w	8001142 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ffa:	4b8b      	ldr	r3, [pc, #556]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10d      	bne.n	8001022 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4b88      	ldr	r3, [pc, #544]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a87      	ldr	r2, [pc, #540]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b85      	ldr	r3, [pc, #532]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800101e:	2301      	movs	r3, #1
 8001020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001022:	4b82      	ldr	r3, [pc, #520]	; (800122c <HAL_RCC_OscConfig+0x4c8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102a:	2b00      	cmp	r3, #0
 800102c:	d118      	bne.n	8001060 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800102e:	4b7f      	ldr	r3, [pc, #508]	; (800122c <HAL_RCC_OscConfig+0x4c8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a7e      	ldr	r2, [pc, #504]	; (800122c <HAL_RCC_OscConfig+0x4c8>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800103a:	f7ff fbdd 	bl	80007f8 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001042:	f7ff fbd9 	bl	80007f8 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b64      	cmp	r3, #100	; 0x64
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e103      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001054:	4b75      	ldr	r3, [pc, #468]	; (800122c <HAL_RCC_OscConfig+0x4c8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d106      	bne.n	8001076 <HAL_RCC_OscConfig+0x312>
 8001068:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4a6e      	ldr	r2, [pc, #440]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6213      	str	r3, [r2, #32]
 8001074:	e02d      	b.n	80010d2 <HAL_RCC_OscConfig+0x36e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10c      	bne.n	8001098 <HAL_RCC_OscConfig+0x334>
 800107e:	4b6a      	ldr	r3, [pc, #424]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	4a69      	ldr	r2, [pc, #420]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	f023 0301 	bic.w	r3, r3, #1
 8001088:	6213      	str	r3, [r2, #32]
 800108a:	4b67      	ldr	r3, [pc, #412]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4a66      	ldr	r2, [pc, #408]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8001090:	f023 0304 	bic.w	r3, r3, #4
 8001094:	6213      	str	r3, [r2, #32]
 8001096:	e01c      	b.n	80010d2 <HAL_RCC_OscConfig+0x36e>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b05      	cmp	r3, #5
 800109e:	d10c      	bne.n	80010ba <HAL_RCC_OscConfig+0x356>
 80010a0:	4b61      	ldr	r3, [pc, #388]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	4a60      	ldr	r2, [pc, #384]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6213      	str	r3, [r2, #32]
 80010ac:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4a5d      	ldr	r2, [pc, #372]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6213      	str	r3, [r2, #32]
 80010b8:	e00b      	b.n	80010d2 <HAL_RCC_OscConfig+0x36e>
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a5a      	ldr	r2, [pc, #360]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	6213      	str	r3, [r2, #32]
 80010c6:	4b58      	ldr	r3, [pc, #352]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4a57      	ldr	r2, [pc, #348]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	f023 0304 	bic.w	r3, r3, #4
 80010d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d015      	beq.n	8001106 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010da:	f7ff fb8d 	bl	80007f8 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e0:	e00a      	b.n	80010f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e2:	f7ff fb89 	bl	80007f8 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e0b1      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f8:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0ee      	beq.n	80010e2 <HAL_RCC_OscConfig+0x37e>
 8001104:	e014      	b.n	8001130 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff fb77 	bl	80007f8 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110c:	e00a      	b.n	8001124 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110e:	f7ff fb73 	bl	80007f8 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	f241 3288 	movw	r2, #5000	; 0x1388
 800111c:	4293      	cmp	r3, r2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e09b      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001124:	4b40      	ldr	r3, [pc, #256]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1ee      	bne.n	800110e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d105      	bne.n	8001142 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001136:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a3b      	ldr	r2, [pc, #236]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8087 	beq.w	800125a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b08      	cmp	r3, #8
 8001156:	d061      	beq.n	800121c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d146      	bne.n	80011ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001160:	4b33      	ldr	r3, [pc, #204]	; (8001230 <HAL_RCC_OscConfig+0x4cc>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001166:	f7ff fb47 	bl	80007f8 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116e:	f7ff fb43 	bl	80007f8 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e06d      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f0      	bne.n	800116e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001194:	d108      	bne.n	80011a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	4921      	ldr	r1, [pc, #132]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a19      	ldr	r1, [r3, #32]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	430b      	orrs	r3, r1
 80011ba:	491b      	ldr	r1, [pc, #108]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_RCC_OscConfig+0x4cc>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fb17 	bl	80007f8 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ce:	f7ff fb13 	bl	80007f8 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e03d      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x46a>
 80011ec:	e035      	b.n	800125a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_RCC_OscConfig+0x4cc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fb00 	bl	80007f8 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff fafc 	bl	80007f8 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e026      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x498>
 800121a:	e01e      	b.n	800125a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d107      	bne.n	8001234 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e019      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
 8001228:	40021000 	.word	0x40021000
 800122c:	40007000 	.word	0x40007000
 8001230:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_RCC_OscConfig+0x500>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	429a      	cmp	r2, r3
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001252:	429a      	cmp	r2, r3
 8001254:	d001      	beq.n	800125a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e0d0      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800127c:	4b6a      	ldr	r3, [pc, #424]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d910      	bls.n	80012ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128a:	4b67      	ldr	r3, [pc, #412]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 0207 	bic.w	r2, r3, #7
 8001292:	4965      	ldr	r1, [pc, #404]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	4b63      	ldr	r3, [pc, #396]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0b8      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c4:	4b59      	ldr	r3, [pc, #356]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a58      	ldr	r2, [pc, #352]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012dc:	4b53      	ldr	r3, [pc, #332]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e8:	4b50      	ldr	r3, [pc, #320]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	494d      	ldr	r1, [pc, #308]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d040      	beq.n	8001388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d115      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e07f      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d107      	bne.n	8001336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001326:	4b41      	ldr	r3, [pc, #260]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d109      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e073      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	4b3d      	ldr	r3, [pc, #244]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e06b      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f023 0203 	bic.w	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4936      	ldr	r1, [pc, #216]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001358:	f7ff fa4e 	bl	80007f8 <HAL_GetTick>
 800135c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135e:	e00a      	b.n	8001376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001360:	f7ff fa4a 	bl	80007f8 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f241 3288 	movw	r2, #5000	; 0x1388
 800136e:	4293      	cmp	r3, r2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e053      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 020c 	and.w	r2, r3, #12
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	429a      	cmp	r2, r3
 8001386:	d1eb      	bne.n	8001360 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d210      	bcs.n	80013b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 0207 	bic.w	r2, r3, #7
 800139e:	4922      	ldr	r1, [pc, #136]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e032      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4916      	ldr	r1, [pc, #88]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	490e      	ldr	r1, [pc, #56]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013f6:	f000 f821 	bl	800143c <HAL_RCC_GetSysClockFreq>
 80013fa:	4602      	mov	r2, r0
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	490a      	ldr	r1, [pc, #40]	; (8001430 <HAL_RCC_ClockConfig+0x1c8>)
 8001408:	5ccb      	ldrb	r3, [r1, r3]
 800140a:	fa22 f303 	lsr.w	r3, r2, r3
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <HAL_RCC_ClockConfig+0x1cc>)
 8001410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_ClockConfig+0x1d0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f8fc 	bl	8000614 <HAL_InitTick>

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000
 800142c:	40021000 	.word	0x40021000
 8001430:	08003e58 	.word	0x08003e58
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b04      	cmp	r3, #4
 8001464:	d002      	beq.n	800146c <HAL_RCC_GetSysClockFreq+0x30>
 8001466:	2b08      	cmp	r3, #8
 8001468:	d003      	beq.n	8001472 <HAL_RCC_GetSysClockFreq+0x36>
 800146a:	e027      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800146e:	613b      	str	r3, [r7, #16]
      break;
 8001470:	e027      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d010      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0c5b      	lsrs	r3, r3, #17
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	4a11      	ldr	r2, [pc, #68]	; (80014dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800149e:	fb03 f202 	mul.w	r2, r3, r2
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e004      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	613b      	str	r3, [r7, #16]
      break;
 80014ba:	e002      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80014be:	613b      	str	r3, [r7, #16]
      break;
 80014c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c2:	693b      	ldr	r3, [r7, #16]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	007a1200 	.word	0x007a1200
 80014d8:	08003e70 	.word	0x08003e70
 80014dc:	08003e80 	.word	0x08003e80
 80014e0:	003d0900 	.word	0x003d0900

080014e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	20000000 	.word	0x20000000

080014f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014fc:	f7ff fff2 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001500:	4602      	mov	r2, r0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	4903      	ldr	r1, [pc, #12]	; (800151c <HAL_RCC_GetPCLK1Freq+0x24>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	08003e68 	.word	0x08003e68

08001520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001524:	f7ff ffde 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	0adb      	lsrs	r3, r3, #11
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4903      	ldr	r1, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001536:	5ccb      	ldrb	r3, [r1, r3]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	08003e68 	.word	0x08003e68

08001548 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	220f      	movs	r2, #15
 8001556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0207 	and.w	r2, r3, #7
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40022000 	.word	0x40022000

080015a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <RCC_Delay+0x34>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <RCC_Delay+0x38>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0a5b      	lsrs	r3, r3, #9
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015c4:	bf00      	nop
  }
  while (Delay --);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	60fa      	str	r2, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f9      	bne.n	80015c4 <RCC_Delay+0x1c>
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000000 	.word	0x20000000
 80015e0:	10624dd3 	.word	0x10624dd3

080015e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e041      	b.n	800167a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f839 	bl	8001682 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3304      	adds	r3, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f000 f9b4 	bl	8001990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d001      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e03a      	b.n	8001722 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a18      	ldr	r2, [pc, #96]	; (800172c <HAL_TIM_Base_Start_IT+0x98>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00e      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x58>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d6:	d009      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x58>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_TIM_Base_Start_IT+0x9c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d004      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x58>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <HAL_TIM_Base_Start_IT+0xa0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d010      	beq.n	8001720 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0201 	orr.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800170e:	e007      	b.n	8001720 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40000400 	.word	0x40000400
 8001734:	40000800 	.word	0x40000800

08001738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d122      	bne.n	8001794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b02      	cmp	r3, #2
 800175a:	d11b      	bne.n	8001794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0202 	mvn.w	r2, #2
 8001764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8ed 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 8001780:	e005      	b.n	800178e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f8e0 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8ef 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d122      	bne.n	80017e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d11b      	bne.n	80017e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f06f 0204 	mvn.w	r2, #4
 80017b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f8c3 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 80017d4:	e005      	b.n	80017e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f8b6 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f8c5 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d122      	bne.n	800183c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b08      	cmp	r3, #8
 8001802:	d11b      	bne.n	800183c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0208 	mvn.w	r2, #8
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f899 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f88c 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f89b 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b10      	cmp	r3, #16
 8001848:	d122      	bne.n	8001890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b10      	cmp	r3, #16
 8001856:	d11b      	bne.n	8001890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0210 	mvn.w	r2, #16
 8001860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2208      	movs	r2, #8
 8001866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f86f 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 800187c:	e005      	b.n	800188a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f862 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f871 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b01      	cmp	r3, #1
 800189c:	d10e      	bne.n	80018bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0201 	mvn.w	r2, #1
 80018b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7fe fe10 	bl	80004dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	2b80      	cmp	r3, #128	; 0x80
 80018c8:	d10e      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d4:	2b80      	cmp	r3, #128	; 0x80
 80018d6:	d107      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8bf 	bl	8001a66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f2:	2b40      	cmp	r3, #64	; 0x40
 80018f4:	d10e      	bne.n	8001914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001900:	2b40      	cmp	r3, #64	; 0x40
 8001902:	d107      	bne.n	8001914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800190c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f835 	bl	800197e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b20      	cmp	r3, #32
 8001920:	d10e      	bne.n	8001940 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b20      	cmp	r3, #32
 800192e:	d107      	bne.n	8001940 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0220 	mvn.w	r2, #32
 8001938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f88a 	bl	8001a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <TIM_Base_SetConfig+0xb8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00b      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ae:	d007      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a26      	ldr	r2, [pc, #152]	; (8001a4c <TIM_Base_SetConfig+0xbc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d003      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <TIM_Base_SetConfig+0xc0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d108      	bne.n	80019d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <TIM_Base_SetConfig+0xb8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00b      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e0:	d007      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <TIM_Base_SetConfig+0xbc>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d003      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <TIM_Base_SetConfig+0xc0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d108      	bne.n	8001a04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <TIM_Base_SetConfig+0xb8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d103      	bne.n	8001a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	615a      	str	r2, [r3, #20]
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40000800 	.word	0x40000800

08001a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e042      	b.n	8001b10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7fe fd6c 	bl	800057c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2224      	movs	r2, #36	; 0x24
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f92b 	bl	8001d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	4613      	mov	r3, r2
 8001b26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d17c      	bne.n	8001c32 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_UART_Receive+0x2c>
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e075      	b.n	8001c34 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2222      	movs	r2, #34	; 0x22
 8001b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b5c:	f7fe fe4c 	bl	80007f8 <HAL_GetTick>
 8001b60:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	88fa      	ldrh	r2, [r7, #6]
 8001b6c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b76:	d108      	bne.n	8001b8a <HAL_UART_Receive+0x72>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d104      	bne.n	8001b8a <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	e003      	b.n	8001b92 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001b92:	e043      	b.n	8001c1c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f84c 	bl	8001c3c <UART_WaitOnFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e042      	b.n	8001c34 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10c      	bne.n	8001bce <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	3302      	adds	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	e01f      	b.n	8001c0e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd6:	d007      	beq.n	8001be8 <HAL_UART_Receive+0xd0>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10a      	bne.n	8001bf6 <HAL_UART_Receive+0xde>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d106      	bne.n	8001bf6 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	e008      	b.n	8001c08 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1b6      	bne.n	8001b94 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b090      	sub	sp, #64	; 0x40
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c4c:	e050      	b.n	8001cf0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d04c      	beq.n	8001cf0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8001c5c:	f7fe fdcc 	bl	80007f8 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d241      	bcs.n	8001cf0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	330c      	adds	r3, #12
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c76:	e853 3f00 	ldrex	r3, [r3]
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c8c:	637a      	str	r2, [r7, #52]	; 0x34
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c94:	e841 2300 	strex	r3, r2, [r1]
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e5      	bne.n	8001c6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3314      	adds	r3, #20
 8001ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	e853 3f00 	ldrex	r3, [r3]
 8001cae:	613b      	str	r3, [r7, #16]
   return(result);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3314      	adds	r3, #20
 8001cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc0:	623a      	str	r2, [r7, #32]
 8001cc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc4:	69f9      	ldr	r1, [r7, #28]
 8001cc6:	6a3a      	ldr	r2, [r7, #32]
 8001cc8:	e841 2300 	strex	r3, r2, [r1]
 8001ccc:	61bb      	str	r3, [r7, #24]
   return(result);
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1e5      	bne.n	8001ca0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e00f      	b.n	8001d10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d09f      	beq.n	8001c4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3740      	adds	r7, #64	; 0x40
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d52:	f023 030c 	bic.w	r3, r3, #12
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a2c      	ldr	r2, [pc, #176]	; (8001e2c <UART_SetConfig+0x114>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d103      	bne.n	8001d88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d80:	f7ff fbce 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	e002      	b.n	8001d8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d88:	f7ff fbb6 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001d8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	009a      	lsls	r2, r3, #2
 8001d98:	441a      	add	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <UART_SetConfig+0x118>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	0119      	lsls	r1, r3, #4
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	009a      	lsls	r2, r3, #2
 8001db8:	441a      	add	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <UART_SetConfig+0x118>)
 8001dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2064      	movs	r0, #100	; 0x64
 8001dce:	fb00 f303 	mul.w	r3, r0, r3
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	3332      	adds	r3, #50	; 0x32
 8001dd8:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <UART_SetConfig+0x118>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de4:	4419      	add	r1, r3
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009a      	lsls	r2, r3, #2
 8001df0:	441a      	add	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <UART_SetConfig+0x118>)
 8001dfe:	fba3 0302 	umull	r0, r3, r3, r2
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2064      	movs	r0, #100	; 0x64
 8001e06:	fb00 f303 	mul.w	r3, r0, r3
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	3332      	adds	r3, #50	; 0x32
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <UART_SetConfig+0x118>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	f003 020f 	and.w	r2, r3, #15
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	440a      	add	r2, r1
 8001e22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40013800 	.word	0x40013800
 8001e30:	51eb851f 	.word	0x51eb851f

08001e34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f103 0208 	add.w	r2, r3, #8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f103 0208 	add.w	r2, r3, #8
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f103 0208 	add.w	r2, r3, #8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	601a      	str	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee6:	d103      	bne.n	8001ef0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	e00c      	b.n	8001f0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e002      	b.n	8001efe <vListInsert+0x2e>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d2f6      	bcs.n	8001ef8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	601a      	str	r2, [r3, #0]
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6892      	ldr	r2, [r2, #8]
 8001f56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6852      	ldr	r2, [r2, #4]
 8001f60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d103      	bne.n	8001f74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	1e5a      	subs	r2, r3, #1
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
	...

08001f94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10a      	bne.n	8001fbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fac:	f383 8811 	msr	BASEPRI, r3
 8001fb0:	f3bf 8f6f 	isb	sy
 8001fb4:	f3bf 8f4f 	dsb	sy
 8001fb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001fba:	bf00      	nop
 8001fbc:	e7fe      	b.n	8001fbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001fbe:	f001 fb8d 	bl	80036dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	68f9      	ldr	r1, [r7, #12]
 8001fcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	441a      	add	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	441a      	add	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	22ff      	movs	r2, #255	; 0xff
 8002002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	22ff      	movs	r2, #255	; 0xff
 800200a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d114      	bne.n	800203e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01a      	beq.n	8002052 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3310      	adds	r3, #16
 8002020:	4618      	mov	r0, r3
 8002022:	f000 ff99 	bl	8002f58 <xTaskRemoveFromEventList>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <xQueueGenericReset+0xcc>)
 800202e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f3bf 8f4f 	dsb	sy
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	e009      	b.n	8002052 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3310      	adds	r3, #16
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fef6 	bl	8001e34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3324      	adds	r3, #36	; 0x24
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fef1 	bl	8001e34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002052:	f001 fb73 	bl	800373c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	e000ed04 	.word	0xe000ed04

08002064 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	4613      	mov	r3, r2
 8002070:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10a      	bne.n	800208e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	613b      	str	r3, [r7, #16]
}
 800208a:	bf00      	nop
 800208c:	e7fe      	b.n	800208c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	e004      	b.n	80020a4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	3348      	adds	r3, #72	; 0x48
 80020a8:	4618      	mov	r0, r3
 80020aa:	f001 fbd9 	bl	8003860 <pvPortMalloc>
 80020ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00f      	beq.n	80020d6 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	3348      	adds	r3, #72	; 0x48
 80020ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020c4:	79fa      	ldrb	r2, [r7, #7]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	4613      	mov	r3, r2
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f805 	bl	80020e0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80020d6:	69bb      	ldr	r3, [r7, #24]
	}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e002      	b.n	8002102 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800210e:	2101      	movs	r1, #1
 8002110:	69b8      	ldr	r0, [r7, #24]
 8002112:	f7ff ff3f 	bl	8001f94 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08e      	sub	sp, #56	; 0x38
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800212e:	2300      	movs	r3, #0
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10a      	bne.n	8002152 <xQueueGenericSend+0x32>
	__asm volatile
 800213c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002140:	f383 8811 	msr	BASEPRI, r3
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	f3bf 8f4f 	dsb	sy
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800214e:	bf00      	nop
 8002150:	e7fe      	b.n	8002150 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d103      	bne.n	8002160 <xQueueGenericSend+0x40>
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <xQueueGenericSend+0x44>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <xQueueGenericSend+0x46>
 8002164:	2300      	movs	r3, #0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10a      	bne.n	8002180 <xQueueGenericSend+0x60>
	__asm volatile
 800216a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216e:	f383 8811 	msr	BASEPRI, r3
 8002172:	f3bf 8f6f 	isb	sy
 8002176:	f3bf 8f4f 	dsb	sy
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800217c:	bf00      	nop
 800217e:	e7fe      	b.n	800217e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d103      	bne.n	800218e <xQueueGenericSend+0x6e>
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <xQueueGenericSend+0x72>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <xQueueGenericSend+0x74>
 8002192:	2300      	movs	r3, #0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <xQueueGenericSend+0x8e>
	__asm volatile
 8002198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219c:	f383 8811 	msr	BASEPRI, r3
 80021a0:	f3bf 8f6f 	isb	sy
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	623b      	str	r3, [r7, #32]
}
 80021aa:	bf00      	nop
 80021ac:	e7fe      	b.n	80021ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021ae:	f001 f897 	bl	80032e0 <xTaskGetSchedulerState>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <xQueueGenericSend+0x9e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <xQueueGenericSend+0xa2>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <xQueueGenericSend+0xa4>
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10a      	bne.n	80021de <xQueueGenericSend+0xbe>
	__asm volatile
 80021c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	61fb      	str	r3, [r7, #28]
}
 80021da:	bf00      	nop
 80021dc:	e7fe      	b.n	80021dc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021de:	f001 fa7d 	bl	80036dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d302      	bcc.n	80021f4 <xQueueGenericSend+0xd4>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d129      	bne.n	8002248 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021fa:	f000 f96f 	bl	80024dc <prvCopyDataToQueue>
 80021fe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	2b00      	cmp	r3, #0
 8002206:	d010      	beq.n	800222a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	3324      	adds	r3, #36	; 0x24
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fea3 	bl	8002f58 <xTaskRemoveFromEventList>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002218:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <xQueueGenericSend+0x1f8>)
 800221a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	e00a      	b.n	8002240 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002230:	4b39      	ldr	r3, [pc, #228]	; (8002318 <xQueueGenericSend+0x1f8>)
 8002232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002240:	f001 fa7c 	bl	800373c <vPortExitCritical>
				return pdPASS;
 8002244:	2301      	movs	r3, #1
 8002246:	e063      	b.n	8002310 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d103      	bne.n	8002256 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800224e:	f001 fa75 	bl	800373c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002252:	2300      	movs	r3, #0
 8002254:	e05c      	b.n	8002310 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002258:	2b00      	cmp	r3, #0
 800225a:	d106      	bne.n	800226a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fedb 	bl	800301c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002266:	2301      	movs	r3, #1
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800226a:	f001 fa67 	bl	800373c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800226e:	f000 fc85 	bl	8002b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002272:	f001 fa33 	bl	80036dc <vPortEnterCritical>
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800227c:	b25b      	sxtb	r3, r3
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d103      	bne.n	800228c <xQueueGenericSend+0x16c>
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002292:	b25b      	sxtb	r3, r3
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d103      	bne.n	80022a2 <xQueueGenericSend+0x182>
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022a2:	f001 fa4b 	bl	800373c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022a6:	1d3a      	adds	r2, r7, #4
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 feca 	bl	8003048 <xTaskCheckForTimeOut>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d124      	bne.n	8002304 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022bc:	f000 fa06 	bl	80026cc <prvIsQueueFull>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d018      	beq.n	80022f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	3310      	adds	r3, #16
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fe1e 	bl	8002f10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022d6:	f000 f991 	bl	80025fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022da:	f000 fc5d 	bl	8002b98 <xTaskResumeAll>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f47f af7c 	bne.w	80021de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <xQueueGenericSend+0x1f8>)
 80022e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	f3bf 8f6f 	isb	sy
 80022f6:	e772      	b.n	80021de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80022f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022fa:	f000 f97f 	bl	80025fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022fe:	f000 fc4b 	bl	8002b98 <xTaskResumeAll>
 8002302:	e76c      	b.n	80021de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002306:	f000 f979 	bl	80025fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800230a:	f000 fc45 	bl	8002b98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800230e:	2300      	movs	r3, #0
		}
	}
}
 8002310:	4618      	mov	r0, r3
 8002312:	3738      	adds	r7, #56	; 0x38
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	e000ed04 	.word	0xe000ed04

0800231c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <xQueueReceive+0x30>
	__asm volatile
 8002336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	623b      	str	r3, [r7, #32]
}
 8002348:	bf00      	nop
 800234a:	e7fe      	b.n	800234a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <xQueueReceive+0x3e>
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <xQueueReceive+0x42>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <xQueueReceive+0x44>
 800235e:	2300      	movs	r3, #0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <xQueueReceive+0x5e>
	__asm volatile
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	f383 8811 	msr	BASEPRI, r3
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	61fb      	str	r3, [r7, #28]
}
 8002376:	bf00      	nop
 8002378:	e7fe      	b.n	8002378 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800237a:	f000 ffb1 	bl	80032e0 <xTaskGetSchedulerState>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <xQueueReceive+0x6e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <xQueueReceive+0x72>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <xQueueReceive+0x74>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <xQueueReceive+0x8e>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	61bb      	str	r3, [r7, #24]
}
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80023aa:	f001 f997 	bl	80036dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01f      	beq.n	80023fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023be:	f000 f8f7 	bl	80025b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	1e5a      	subs	r2, r3, #1
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00f      	beq.n	80023f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	3310      	adds	r3, #16
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fdbe 	bl	8002f58 <xTaskRemoveFromEventList>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <xQueueReceive+0x1bc>)
 80023e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023f2:	f001 f9a3 	bl	800373c <vPortExitCritical>
				return pdPASS;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e069      	b.n	80024ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002400:	f001 f99c 	bl	800373c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002404:	2300      	movs	r3, #0
 8002406:	e062      	b.n	80024ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fe02 	bl	800301c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002418:	2301      	movs	r3, #1
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800241c:	f001 f98e 	bl	800373c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002420:	f000 fbac 	bl	8002b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002424:	f001 f95a 	bl	80036dc <vPortEnterCritical>
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800242e:	b25b      	sxtb	r3, r3
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d103      	bne.n	800243e <xQueueReceive+0x122>
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002444:	b25b      	sxtb	r3, r3
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244a:	d103      	bne.n	8002454 <xQueueReceive+0x138>
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002454:	f001 f972 	bl	800373c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002458:	1d3a      	adds	r2, r7, #4
 800245a:	f107 0310 	add.w	r3, r7, #16
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fdf1 	bl	8003048 <xTaskCheckForTimeOut>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d123      	bne.n	80024b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800246c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800246e:	f000 f917 	bl	80026a0 <prvIsQueueEmpty>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d017      	beq.n	80024a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247a:	3324      	adds	r3, #36	; 0x24
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fd45 	bl	8002f10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002488:	f000 f8b8 	bl	80025fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800248c:	f000 fb84 	bl	8002b98 <xTaskResumeAll>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d189      	bne.n	80023aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <xQueueReceive+0x1bc>)
 8002498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	e780      	b.n	80023aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80024a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024aa:	f000 f8a7 	bl	80025fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024ae:	f000 fb73 	bl	8002b98 <xTaskResumeAll>
 80024b2:	e77a      	b.n	80023aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80024b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024b6:	f000 f8a1 	bl	80025fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024ba:	f000 fb6d 	bl	8002b98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024c0:	f000 f8ee 	bl	80026a0 <prvIsQueueEmpty>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f43f af6f 	beq.w	80023aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80024cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3730      	adds	r7, #48	; 0x30
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	e000ed04 	.word	0xe000ed04

080024dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d14d      	bne.n	800259e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 ff08 	bl	800331c <xTaskPriorityDisinherit>
 800250c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	e043      	b.n	800259e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d119      	bne.n	8002550 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6898      	ldr	r0, [r3, #8]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	461a      	mov	r2, r3
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	f001 fc0a 	bl	8003d40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	441a      	add	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	d32b      	bcc.n	800259e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	e026      	b.n	800259e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	68d8      	ldr	r0, [r3, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	461a      	mov	r2, r3
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	f001 fbf0 	bl	8003d40 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	425b      	negs	r3, r3
 800256a:	441a      	add	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	425b      	negs	r3, r3
 8002586:	441a      	add	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d105      	bne.n	800259e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	3b01      	subs	r3, #1
 800259c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80025a6:	697b      	ldr	r3, [r7, #20]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d018      	beq.n	80025f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	441a      	add	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d303      	bcc.n	80025e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68d9      	ldr	r1, [r3, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	461a      	mov	r2, r3
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	f001 fba6 	bl	8003d40 <memcpy>
	}
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002604:	f001 f86a 	bl	80036dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800260e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002610:	e011      	b.n	8002636 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	2b00      	cmp	r3, #0
 8002618:	d012      	beq.n	8002640 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3324      	adds	r3, #36	; 0x24
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fc9a 	bl	8002f58 <xTaskRemoveFromEventList>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800262a:	f000 fd6f 	bl	800310c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	3b01      	subs	r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	dce9      	bgt.n	8002612 <prvUnlockQueue+0x16>
 800263e:	e000      	b.n	8002642 <prvUnlockQueue+0x46>
					break;
 8002640:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	22ff      	movs	r2, #255	; 0xff
 8002646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800264a:	f001 f877 	bl	800373c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800264e:	f001 f845 	bl	80036dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002658:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800265a:	e011      	b.n	8002680 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d012      	beq.n	800268a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3310      	adds	r3, #16
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fc75 	bl	8002f58 <xTaskRemoveFromEventList>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002674:	f000 fd4a 	bl	800310c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002678:	7bbb      	ldrb	r3, [r7, #14]
 800267a:	3b01      	subs	r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002684:	2b00      	cmp	r3, #0
 8002686:	dce9      	bgt.n	800265c <prvUnlockQueue+0x60>
 8002688:	e000      	b.n	800268c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800268a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	22ff      	movs	r2, #255	; 0xff
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002694:	f001 f852 	bl	800373c <vPortExitCritical>
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026a8:	f001 f818 	bl	80036dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e001      	b.n	80026be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026be:	f001 f83d 	bl	800373c <vPortExitCritical>

	return xReturn;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026d4:	f001 f802 	bl	80036dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d102      	bne.n	80026ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80026e4:	2301      	movs	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e001      	b.n	80026ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026ee:	f001 f825 	bl	800373c <vPortExitCritical>

	return xReturn;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08e      	sub	sp, #56	; 0x38
 8002700:	af04      	add	r7, sp, #16
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800270a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	623b      	str	r3, [r7, #32]
}
 8002722:	bf00      	nop
 8002724:	e7fe      	b.n	8002724 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10a      	bne.n	8002742 <xTaskCreateStatic+0x46>
	__asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	61fb      	str	r3, [r7, #28]
}
 800273e:	bf00      	nop
 8002740:	e7fe      	b.n	8002740 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002742:	23a0      	movs	r3, #160	; 0xa0
 8002744:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2ba0      	cmp	r3, #160	; 0xa0
 800274a:	d00a      	beq.n	8002762 <xTaskCreateStatic+0x66>
	__asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	61bb      	str	r3, [r7, #24]
}
 800275e:	bf00      	nop
 8002760:	e7fe      	b.n	8002760 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01e      	beq.n	80027a6 <xTaskCreateStatic+0xaa>
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01b      	beq.n	80027a6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002776:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	2202      	movs	r2, #2
 800277c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002780:	2300      	movs	r3, #0
 8002782:	9303      	str	r3, [sp, #12]
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f851 	bl	8002840 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800279e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027a0:	f000 f8e4 	bl	800296c <prvAddNewTaskToReadyList>
 80027a4:	e001      	b.n	80027aa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027aa:	697b      	ldr	r3, [r7, #20]
	}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3728      	adds	r7, #40	; 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af04      	add	r7, sp, #16
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 f849 	bl	8003860 <pvPortMalloc>
 80027ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00e      	beq.n	80027f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027d6:	20a0      	movs	r0, #160	; 0xa0
 80027d8:	f001 f842 	bl	8003860 <pvPortMalloc>
 80027dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
 80027ea:	e005      	b.n	80027f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027ec:	6978      	ldr	r0, [r7, #20]
 80027ee:	f001 f8fb 	bl	80039e8 <vPortFree>
 80027f2:	e001      	b.n	80027f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d017      	beq.n	800282e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002806:	88fa      	ldrh	r2, [r7, #6]
 8002808:	2300      	movs	r3, #0
 800280a:	9303      	str	r3, [sp, #12]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	9302      	str	r3, [sp, #8]
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f80f 	bl	8002840 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002822:	69f8      	ldr	r0, [r7, #28]
 8002824:	f000 f8a2 	bl	800296c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002828:	2301      	movs	r3, #1
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	e002      	b.n	8002834 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002834:	69bb      	ldr	r3, [r7, #24]
	}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002858:	3b01      	subs	r3, #1
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f023 0307 	bic.w	r3, r3, #7
 8002866:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	617b      	str	r3, [r7, #20]
}
 8002884:	bf00      	nop
 8002886:	e7fe      	b.n	8002886 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002888:	2300      	movs	r3, #0
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	e012      	b.n	80028b4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	7819      	ldrb	r1, [r3, #0]
 8002896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	3334      	adds	r3, #52	; 0x34
 800289e:	460a      	mov	r2, r1
 80028a0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	d9e9      	bls.n	800288e <prvInitialiseNewTask+0x4e>
 80028ba:	e000      	b.n	80028be <prvInitialiseNewTask+0x7e>
		{
			break;
 80028bc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	2b06      	cmp	r3, #6
 80028ca:	d901      	bls.n	80028d0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028cc:	2306      	movs	r3, #6
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	2200      	movs	r2, #0
 80028e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	3304      	adds	r3, #4
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fac3 	bl	8001e72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	3318      	adds	r3, #24
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fabe 	bl	8001e72 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	f1c3 0207 	rsb	r2, r3, #7
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	2200      	movs	r2, #0
 8002910:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	2200      	movs	r2, #0
 8002918:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	334c      	adds	r3, #76	; 0x4c
 8002920:	224c      	movs	r2, #76	; 0x4c
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f001 f973 	bl	8003c10 <memset>
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <prvInitialiseNewTask+0x120>)
 800292e:	651a      	str	r2, [r3, #80]	; 0x50
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <prvInitialiseNewTask+0x124>)
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <prvInitialiseNewTask+0x128>)
 800293a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	69b8      	ldr	r0, [r7, #24]
 8002942:	f000 fdd7 	bl	80034f4 <pxPortInitialiseStack>
 8002946:	4602      	mov	r2, r0
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002956:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002958:	bf00      	nop
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20001104 	.word	0x20001104
 8002964:	2000116c 	.word	0x2000116c
 8002968:	200011d4 	.word	0x200011d4

0800296c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002974:	f000 feb2 	bl	80036dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002978:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <prvAddNewTaskToReadyList+0xb8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	4a29      	ldr	r2, [pc, #164]	; (8002a24 <prvAddNewTaskToReadyList+0xb8>)
 8002980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002982:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <prvAddNewTaskToReadyList+0xbc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800298a:	4a27      	ldr	r2, [pc, #156]	; (8002a28 <prvAddNewTaskToReadyList+0xbc>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <prvAddNewTaskToReadyList+0xb8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d110      	bne.n	80029ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002998:	f000 fbdc 	bl	8003154 <prvInitialiseTaskLists>
 800299c:	e00d      	b.n	80029ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <prvAddNewTaskToReadyList+0xc0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <prvAddNewTaskToReadyList+0xbc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d802      	bhi.n	80029ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029b4:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <prvAddNewTaskToReadyList+0xbc>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <prvAddNewTaskToReadyList+0xc4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <prvAddNewTaskToReadyList+0xc4>)
 80029c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	2201      	movs	r2, #1
 80029ca:	409a      	lsls	r2, r3
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <prvAddNewTaskToReadyList+0xc8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <prvAddNewTaskToReadyList+0xc8>)
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <prvAddNewTaskToReadyList+0xcc>)
 80029e4:	441a      	add	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f7ff fa4c 	bl	8001e8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029f2:	f000 fea3 	bl	800373c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <prvAddNewTaskToReadyList+0xc0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00e      	beq.n	8002a1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <prvAddNewTaskToReadyList+0xbc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d207      	bcs.n	8002a1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <prvAddNewTaskToReadyList+0xd0>)
 8002a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200004b8 	.word	0x200004b8
 8002a28:	200003b8 	.word	0x200003b8
 8002a2c:	200004c4 	.word	0x200004c4
 8002a30:	200004d4 	.word	0x200004d4
 8002a34:	200004c0 	.word	0x200004c0
 8002a38:	200003bc 	.word	0x200003bc
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d017      	beq.n	8002a82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <vTaskDelay+0x60>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <vTaskDelay+0x30>
	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	60bb      	str	r3, [r7, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	e7fe      	b.n	8002a6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a70:	f000 f884 	bl	8002b7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a74:	2100      	movs	r1, #0
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fcd6 	bl	8003428 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a7c:	f000 f88c 	bl	8002b98 <xTaskResumeAll>
 8002a80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d107      	bne.n	8002a98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <vTaskDelay+0x64>)
 8002a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200004e0 	.word	0x200004e0
 8002aa4:	e000ed04 	.word	0xe000ed04

08002aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ab6:	463a      	mov	r2, r7
 8002ab8:	1d39      	adds	r1, r7, #4
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fb50 	bl	8000164 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ac4:	6839      	ldr	r1, [r7, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	9202      	str	r2, [sp, #8]
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	460a      	mov	r2, r1
 8002ad6:	4921      	ldr	r1, [pc, #132]	; (8002b5c <vTaskStartScheduler+0xb4>)
 8002ad8:	4821      	ldr	r0, [pc, #132]	; (8002b60 <vTaskStartScheduler+0xb8>)
 8002ada:	f7ff fe0f 	bl	80026fc <xTaskCreateStatic>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4a20      	ldr	r2, [pc, #128]	; (8002b64 <vTaskStartScheduler+0xbc>)
 8002ae2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <vTaskStartScheduler+0xbc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002aec:	2301      	movs	r3, #1
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e001      	b.n	8002af6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d11b      	bne.n	8002b34 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	613b      	str	r3, [r7, #16]
}
 8002b0e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b10:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <vTaskStartScheduler+0xc0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	334c      	adds	r3, #76	; 0x4c
 8002b16:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <vTaskStartScheduler+0xc4>)
 8002b18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <vTaskStartScheduler+0xc8>)
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <vTaskStartScheduler+0xcc>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <vTaskStartScheduler+0xd0>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b2e:	f000 fd63 	bl	80035f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b32:	e00e      	b.n	8002b52 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d10a      	bne.n	8002b52 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	60fb      	str	r3, [r7, #12]
}
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <vTaskStartScheduler+0xa8>
}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	08003e50 	.word	0x08003e50
 8002b60:	08003125 	.word	0x08003125
 8002b64:	200004dc 	.word	0x200004dc
 8002b68:	200003b8 	.word	0x200003b8
 8002b6c:	2000005c 	.word	0x2000005c
 8002b70:	200004d8 	.word	0x200004d8
 8002b74:	200004c4 	.word	0x200004c4
 8002b78:	200004bc 	.word	0x200004bc

08002b7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <vTaskSuspendAll+0x18>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <vTaskSuspendAll+0x18>)
 8002b88:	6013      	str	r3, [r2, #0]
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	200004e0 	.word	0x200004e0

08002b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ba6:	4b41      	ldr	r3, [pc, #260]	; (8002cac <xTaskResumeAll+0x114>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	603b      	str	r3, [r7, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	e7fe      	b.n	8002bc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bc4:	f000 fd8a 	bl	80036dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bc8:	4b38      	ldr	r3, [pc, #224]	; (8002cac <xTaskResumeAll+0x114>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	4a37      	ldr	r2, [pc, #220]	; (8002cac <xTaskResumeAll+0x114>)
 8002bd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bd2:	4b36      	ldr	r3, [pc, #216]	; (8002cac <xTaskResumeAll+0x114>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d161      	bne.n	8002c9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bda:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <xTaskResumeAll+0x118>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d05d      	beq.n	8002c9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002be2:	e02e      	b.n	8002c42 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002be4:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <xTaskResumeAll+0x11c>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3318      	adds	r3, #24
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff f9a5 	bl	8001f40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff f9a0 	bl	8001f40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	2201      	movs	r2, #1
 8002c06:	409a      	lsls	r2, r3
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <xTaskResumeAll+0x120>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	4a2a      	ldr	r2, [pc, #168]	; (8002cb8 <xTaskResumeAll+0x120>)
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <xTaskResumeAll+0x124>)
 8002c20:	441a      	add	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3304      	adds	r3, #4
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f7ff f92e 	bl	8001e8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <xTaskResumeAll+0x128>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d302      	bcc.n	8002c42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002c3c:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <xTaskResumeAll+0x12c>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c42:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <xTaskResumeAll+0x11c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1cc      	bne.n	8002be4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c50:	f000 fb22 	bl	8003298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c54:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <xTaskResumeAll+0x130>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d010      	beq.n	8002c82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c60:	f000 f836 	bl	8002cd0 <xTaskIncrementTick>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002c6a:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <xTaskResumeAll+0x12c>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f1      	bne.n	8002c60 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <xTaskResumeAll+0x130>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <xTaskResumeAll+0x12c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <xTaskResumeAll+0x134>)
 8002c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c9e:	f000 fd4d 	bl	800373c <vPortExitCritical>

	return xAlreadyYielded;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	200004e0 	.word	0x200004e0
 8002cb0:	200004b8 	.word	0x200004b8
 8002cb4:	20000478 	.word	0x20000478
 8002cb8:	200004c0 	.word	0x200004c0
 8002cbc:	200003bc 	.word	0x200003bc
 8002cc0:	200003b8 	.word	0x200003b8
 8002cc4:	200004cc 	.word	0x200004cc
 8002cc8:	200004c8 	.word	0x200004c8
 8002ccc:	e000ed04 	.word	0xe000ed04

08002cd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cda:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <xTaskIncrementTick+0x150>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 808d 	bne.w	8002dfe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ce4:	4b4f      	ldr	r3, [pc, #316]	; (8002e24 <xTaskIncrementTick+0x154>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cec:	4a4d      	ldr	r2, [pc, #308]	; (8002e24 <xTaskIncrementTick+0x154>)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d120      	bne.n	8002d3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cf8:	4b4b      	ldr	r3, [pc, #300]	; (8002e28 <xTaskIncrementTick+0x158>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <xTaskIncrementTick+0x48>
	__asm volatile
 8002d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	603b      	str	r3, [r7, #0]
}
 8002d14:	bf00      	nop
 8002d16:	e7fe      	b.n	8002d16 <xTaskIncrementTick+0x46>
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <xTaskIncrementTick+0x158>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <xTaskIncrementTick+0x15c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a41      	ldr	r2, [pc, #260]	; (8002e28 <xTaskIncrementTick+0x158>)
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4a41      	ldr	r2, [pc, #260]	; (8002e2c <xTaskIncrementTick+0x15c>)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <xTaskIncrementTick+0x160>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	4a3f      	ldr	r2, [pc, #252]	; (8002e30 <xTaskIncrementTick+0x160>)
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	f000 faaf 	bl	8003298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <xTaskIncrementTick+0x164>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d34d      	bcc.n	8002de0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d44:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <xTaskIncrementTick+0x158>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <xTaskIncrementTick+0x82>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <xTaskIncrementTick+0x84>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d58:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <xTaskIncrementTick+0x164>)
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5e:	601a      	str	r2, [r3, #0]
					break;
 8002d60:	e03e      	b.n	8002de0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d62:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <xTaskIncrementTick+0x158>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d203      	bcs.n	8002d82 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d7a:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <xTaskIncrementTick+0x164>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6013      	str	r3, [r2, #0]
						break;
 8002d80:	e02e      	b.n	8002de0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	3304      	adds	r3, #4
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff f8da 	bl	8001f40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	3318      	adds	r3, #24
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff f8d1 	bl	8001f40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	2201      	movs	r2, #1
 8002da4:	409a      	lsls	r2, r3
 8002da6:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <xTaskIncrementTick+0x168>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <xTaskIncrementTick+0x168>)
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <xTaskIncrementTick+0x16c>)
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f7ff f85f 	bl	8001e8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <xTaskIncrementTick+0x170>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d3b4      	bcc.n	8002d44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dde:	e7b1      	b.n	8002d44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002de0:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <xTaskIncrementTick+0x170>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de6:	4915      	ldr	r1, [pc, #84]	; (8002e3c <xTaskIncrementTick+0x16c>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d907      	bls.n	8002e08 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e004      	b.n	8002e08 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <xTaskIncrementTick+0x174>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	4a0f      	ldr	r2, [pc, #60]	; (8002e44 <xTaskIncrementTick+0x174>)
 8002e06:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <xTaskIncrementTick+0x178>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002e10:	2301      	movs	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e14:	697b      	ldr	r3, [r7, #20]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200004e0 	.word	0x200004e0
 8002e24:	200004bc 	.word	0x200004bc
 8002e28:	20000470 	.word	0x20000470
 8002e2c:	20000474 	.word	0x20000474
 8002e30:	200004d0 	.word	0x200004d0
 8002e34:	200004d8 	.word	0x200004d8
 8002e38:	200004c0 	.word	0x200004c0
 8002e3c:	200003bc 	.word	0x200003bc
 8002e40:	200003b8 	.word	0x200003b8
 8002e44:	200004c8 	.word	0x200004c8
 8002e48:	200004cc 	.word	0x200004cc

08002e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e52:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <vTaskSwitchContext+0xac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e5a:	4b28      	ldr	r3, [pc, #160]	; (8002efc <vTaskSwitchContext+0xb0>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e60:	e044      	b.n	8002eec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002e62:	4b26      	ldr	r3, [pc, #152]	; (8002efc <vTaskSwitchContext+0xb0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <vTaskSwitchContext+0xb4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e76:	7afb      	ldrb	r3, [r7, #11]
 8002e78:	f1c3 031f 	rsb	r3, r3, #31
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	4921      	ldr	r1, [pc, #132]	; (8002f04 <vTaskSwitchContext+0xb8>)
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	607b      	str	r3, [r7, #4]
}
 8002ea4:	bf00      	nop
 8002ea6:	e7fe      	b.n	8002ea6 <vTaskSwitchContext+0x5a>
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <vTaskSwitchContext+0xb8>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	3308      	adds	r3, #8
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d104      	bne.n	8002ed8 <vTaskSwitchContext+0x8c>
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <vTaskSwitchContext+0xbc>)
 8002ee0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <vTaskSwitchContext+0xbc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	334c      	adds	r3, #76	; 0x4c
 8002ee8:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <vTaskSwitchContext+0xc0>)
 8002eea:	6013      	str	r3, [r2, #0]
}
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	200004e0 	.word	0x200004e0
 8002efc:	200004cc 	.word	0x200004cc
 8002f00:	200004c0 	.word	0x200004c0
 8002f04:	200003bc 	.word	0x200003bc
 8002f08:	200003b8 	.word	0x200003b8
 8002f0c:	2000005c 	.word	0x2000005c

08002f10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	60fb      	str	r3, [r7, #12]
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <vTaskPlaceOnEventList+0x44>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe ffc6 	bl	8001ed0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f44:	2101      	movs	r1, #1
 8002f46:	6838      	ldr	r0, [r7, #0]
 8002f48:	f000 fa6e 	bl	8003428 <prvAddCurrentTaskToDelayedList>
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	200003b8 	.word	0x200003b8

08002f58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10a      	bne.n	8002f84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	60fb      	str	r3, [r7, #12]
}
 8002f80:	bf00      	nop
 8002f82:	e7fe      	b.n	8002f82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	3318      	adds	r3, #24
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe ffd9 	bl	8001f40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <xTaskRemoveFromEventList+0xac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11c      	bne.n	8002fd0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe ffd0 	bl	8001f40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	4b17      	ldr	r3, [pc, #92]	; (8003008 <xTaskRemoveFromEventList+0xb0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	4a16      	ldr	r2, [pc, #88]	; (8003008 <xTaskRemoveFromEventList+0xb0>)
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4a13      	ldr	r2, [pc, #76]	; (800300c <xTaskRemoveFromEventList+0xb4>)
 8002fc0:	441a      	add	r2, r3
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f7fe ff5e 	bl	8001e8a <vListInsertEnd>
 8002fce:	e005      	b.n	8002fdc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	3318      	adds	r3, #24
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	480e      	ldr	r0, [pc, #56]	; (8003010 <xTaskRemoveFromEventList+0xb8>)
 8002fd8:	f7fe ff57 	bl	8001e8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <xTaskRemoveFromEventList+0xbc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d905      	bls.n	8002ff6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <xTaskRemoveFromEventList+0xc0>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e001      	b.n	8002ffa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002ffa:	697b      	ldr	r3, [r7, #20]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	200004e0 	.word	0x200004e0
 8003008:	200004c0 	.word	0x200004c0
 800300c:	200003bc 	.word	0x200003bc
 8003010:	20000478 	.word	0x20000478
 8003014:	200003b8 	.word	0x200003b8
 8003018:	200004cc 	.word	0x200004cc

0800301c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <vTaskInternalSetTimeOutState+0x24>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <vTaskInternalSetTimeOutState+0x28>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	605a      	str	r2, [r3, #4]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	200004d0 	.word	0x200004d0
 8003044:	200004bc 	.word	0x200004bc

08003048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	613b      	str	r3, [r7, #16]
}
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	60fb      	str	r3, [r7, #12]
}
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800308a:	f000 fb27 	bl	80036dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <xTaskCheckForTimeOut+0xbc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d102      	bne.n	80030ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	e023      	b.n	80030f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <xTaskCheckForTimeOut+0xc0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d007      	beq.n	80030ca <xTaskCheckForTimeOut+0x82>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d302      	bcc.n	80030ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80030c4:	2301      	movs	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e015      	b.n	80030f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d20b      	bcs.n	80030ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff9b 	bl	800301c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	e004      	b.n	80030f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80030f6:	f000 fb21 	bl	800373c <vPortExitCritical>

	return xReturn;
 80030fa:	69fb      	ldr	r3, [r7, #28]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200004bc 	.word	0x200004bc
 8003108:	200004d0 	.word	0x200004d0

0800310c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <vTaskMissedYield+0x14>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	200004cc 	.word	0x200004cc

08003124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800312c:	f000 f852 	bl	80031d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <prvIdleTask+0x28>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d9f9      	bls.n	800312c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <prvIdleTask+0x2c>)
 800313a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003148:	e7f0      	b.n	800312c <prvIdleTask+0x8>
 800314a:	bf00      	nop
 800314c:	200003bc 	.word	0x200003bc
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800315a:	2300      	movs	r3, #0
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	e00c      	b.n	800317a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <prvInitialiseTaskLists+0x60>)
 800316c:	4413      	add	r3, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fe60 	bl	8001e34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3301      	adds	r3, #1
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b06      	cmp	r3, #6
 800317e:	d9ef      	bls.n	8003160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003180:	480d      	ldr	r0, [pc, #52]	; (80031b8 <prvInitialiseTaskLists+0x64>)
 8003182:	f7fe fe57 	bl	8001e34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003186:	480d      	ldr	r0, [pc, #52]	; (80031bc <prvInitialiseTaskLists+0x68>)
 8003188:	f7fe fe54 	bl	8001e34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800318c:	480c      	ldr	r0, [pc, #48]	; (80031c0 <prvInitialiseTaskLists+0x6c>)
 800318e:	f7fe fe51 	bl	8001e34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003192:	480c      	ldr	r0, [pc, #48]	; (80031c4 <prvInitialiseTaskLists+0x70>)
 8003194:	f7fe fe4e 	bl	8001e34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003198:	480b      	ldr	r0, [pc, #44]	; (80031c8 <prvInitialiseTaskLists+0x74>)
 800319a:	f7fe fe4b 	bl	8001e34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <prvInitialiseTaskLists+0x78>)
 80031a0:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <prvInitialiseTaskLists+0x64>)
 80031a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <prvInitialiseTaskLists+0x7c>)
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <prvInitialiseTaskLists+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200003bc 	.word	0x200003bc
 80031b8:	20000448 	.word	0x20000448
 80031bc:	2000045c 	.word	0x2000045c
 80031c0:	20000478 	.word	0x20000478
 80031c4:	2000048c 	.word	0x2000048c
 80031c8:	200004a4 	.word	0x200004a4
 80031cc:	20000470 	.word	0x20000470
 80031d0:	20000474 	.word	0x20000474

080031d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031da:	e019      	b.n	8003210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031dc:	f000 fa7e 	bl	80036dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <prvCheckTasksWaitingTermination+0x50>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe fea7 	bl	8001f40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <prvCheckTasksWaitingTermination+0x54>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	4a0b      	ldr	r2, [pc, #44]	; (8003228 <prvCheckTasksWaitingTermination+0x54>)
 80031fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <prvCheckTasksWaitingTermination+0x58>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3b01      	subs	r3, #1
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <prvCheckTasksWaitingTermination+0x58>)
 8003204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003206:	f000 fa99 	bl	800373c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f810 	bl	8003230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <prvCheckTasksWaitingTermination+0x58>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e1      	bne.n	80031dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2000048c 	.word	0x2000048c
 8003228:	200004b8 	.word	0x200004b8
 800322c:	200004a0 	.word	0x200004a0

08003230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	334c      	adds	r3, #76	; 0x4c
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fd03 	bl	8003c48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003248:	2b00      	cmp	r3, #0
 800324a:	d108      	bne.n	800325e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fbc9 	bl	80039e8 <vPortFree>
				vPortFree( pxTCB );
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fbc6 	bl	80039e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800325c:	e018      	b.n	8003290 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003264:	2b01      	cmp	r3, #1
 8003266:	d103      	bne.n	8003270 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fbbd 	bl	80039e8 <vPortFree>
	}
 800326e:	e00f      	b.n	8003290 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003276:	2b02      	cmp	r3, #2
 8003278:	d00a      	beq.n	8003290 <prvDeleteTCB+0x60>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	60fb      	str	r3, [r7, #12]
}
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <prvDeleteTCB+0x5e>
	}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800329e:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <prvResetNextTaskUnblockTime+0x40>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <prvResetNextTaskUnblockTime+0x14>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <prvResetNextTaskUnblockTime+0x16>
 80032ac:	2300      	movs	r3, #0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d004      	beq.n	80032bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <prvResetNextTaskUnblockTime+0x44>)
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295
 80032b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032ba:	e008      	b.n	80032ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <prvResetNextTaskUnblockTime+0x40>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4a04      	ldr	r2, [pc, #16]	; (80032dc <prvResetNextTaskUnblockTime+0x44>)
 80032cc:	6013      	str	r3, [r2, #0]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	20000470 	.word	0x20000470
 80032dc:	200004d8 	.word	0x200004d8

080032e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <xTaskGetSchedulerState+0x34>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032ee:	2301      	movs	r3, #1
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	e008      	b.n	8003306 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <xTaskGetSchedulerState+0x38>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032fc:	2302      	movs	r3, #2
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	e001      	b.n	8003306 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003306:	687b      	ldr	r3, [r7, #4]
	}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	200004c4 	.word	0x200004c4
 8003318:	200004e0 	.word	0x200004e0

0800331c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d06e      	beq.n	8003410 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003332:	4b3a      	ldr	r3, [pc, #232]	; (800341c <xTaskPriorityDisinherit+0x100>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	429a      	cmp	r2, r3
 800333a:	d00a      	beq.n	8003352 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	60fb      	str	r3, [r7, #12]
}
 800334e:	bf00      	nop
 8003350:	e7fe      	b.n	8003350 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	60bb      	str	r3, [r7, #8]
}
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003374:	1e5a      	subs	r2, r3, #1
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	429a      	cmp	r2, r3
 8003384:	d044      	beq.n	8003410 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338a:	2b00      	cmp	r3, #0
 800338c:	d140      	bne.n	8003410 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	3304      	adds	r3, #4
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fdd4 	bl	8001f40 <uxListRemove>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d115      	bne.n	80033ca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a2:	491f      	ldr	r1, [pc, #124]	; (8003420 <xTaskPriorityDisinherit+0x104>)
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <xTaskPriorityDisinherit+0xae>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	2201      	movs	r2, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43da      	mvns	r2, r3
 80033c0:	4b18      	ldr	r3, [pc, #96]	; (8003424 <xTaskPriorityDisinherit+0x108>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4013      	ands	r3, r2
 80033c6:	4a17      	ldr	r2, [pc, #92]	; (8003424 <xTaskPriorityDisinherit+0x108>)
 80033c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	f1c3 0207 	rsb	r2, r3, #7
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	2201      	movs	r2, #1
 80033e4:	409a      	lsls	r2, r3
 80033e6:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <xTaskPriorityDisinherit+0x108>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <xTaskPriorityDisinherit+0x108>)
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4a08      	ldr	r2, [pc, #32]	; (8003420 <xTaskPriorityDisinherit+0x104>)
 80033fe:	441a      	add	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f7fe fd3f 	bl	8001e8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800340c:	2301      	movs	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003410:	697b      	ldr	r3, [r7, #20]
	}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200003b8 	.word	0x200003b8
 8003420:	200003bc 	.word	0x200003bc
 8003424:	200004c0 	.word	0x200004c0

08003428 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003432:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3304      	adds	r3, #4
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fd7e 	bl	8001f40 <uxListRemove>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800344a:	4b24      	ldr	r3, [pc, #144]	; (80034dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	2201      	movs	r2, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4013      	ands	r3, r2
 800345e:	4a20      	ldr	r2, [pc, #128]	; (80034e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003460:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d10a      	bne.n	8003480 <prvAddCurrentTaskToDelayedList+0x58>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003470:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3304      	adds	r3, #4
 8003476:	4619      	mov	r1, r3
 8003478:	481a      	ldr	r0, [pc, #104]	; (80034e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800347a:	f7fe fd06 	bl	8001e8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800347e:	e026      	b.n	80034ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003488:	4b14      	ldr	r3, [pc, #80]	; (80034dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	429a      	cmp	r2, r3
 8003496:	d209      	bcs.n	80034ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f7fe fd13 	bl	8001ed0 <vListInsert>
}
 80034aa:	e010      	b.n	80034ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7fe fd09 	bl	8001ed0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034be:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d202      	bcs.n	80034ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80034c8:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	6013      	str	r3, [r2, #0]
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	200004bc 	.word	0x200004bc
 80034dc:	200003b8 	.word	0x200003b8
 80034e0:	200004c0 	.word	0x200004c0
 80034e4:	200004a4 	.word	0x200004a4
 80034e8:	20000474 	.word	0x20000474
 80034ec:	20000470 	.word	0x20000470
 80034f0:	200004d8 	.word	0x200004d8

080034f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3b04      	subs	r3, #4
 8003504:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800350c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3b04      	subs	r3, #4
 8003512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f023 0201 	bic.w	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3b04      	subs	r3, #4
 8003522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003524:	4a08      	ldr	r2, [pc, #32]	; (8003548 <pxPortInitialiseStack+0x54>)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3b14      	subs	r3, #20
 800352e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3b20      	subs	r3, #32
 800353a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800353c:	68fb      	ldr	r3, [r7, #12]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	0800354d 	.word	0x0800354d

0800354c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003552:	2300      	movs	r3, #0
 8003554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <prvTaskExitError+0x54>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355e:	d00a      	beq.n	8003576 <prvTaskExitError+0x2a>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	60fb      	str	r3, [r7, #12]
}
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <prvTaskExitError+0x28>
	__asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	60bb      	str	r3, [r7, #8]
}
 8003588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800358a:	bf00      	nop
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0fc      	beq.n	800358c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	2000000c 	.word	0x2000000c
	...

080035b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035b0:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <pxCurrentTCBConst2>)
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	6808      	ldr	r0, [r1, #0]
 80035b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035ba:	f380 8809 	msr	PSP, r0
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f380 8811 	msr	BASEPRI, r0
 80035ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80035ce:	4770      	bx	lr

080035d0 <pxCurrentTCBConst2>:
 80035d0:	200003b8 	.word	0x200003b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop

080035d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80035d8:	4806      	ldr	r0, [pc, #24]	; (80035f4 <prvPortStartFirstTask+0x1c>)
 80035da:	6800      	ldr	r0, [r0, #0]
 80035dc:	6800      	ldr	r0, [r0, #0]
 80035de:	f380 8808 	msr	MSP, r0
 80035e2:	b662      	cpsie	i
 80035e4:	b661      	cpsie	f
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	df00      	svc	0
 80035f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80035f2:	bf00      	nop
 80035f4:	e000ed08 	.word	0xe000ed08

080035f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <xPortStartScheduler+0xd0>)
 8003600:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	22ff      	movs	r2, #255	; 0xff
 800360e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <xPortStartScheduler+0xd4>)
 8003624:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003626:	4b2a      	ldr	r3, [pc, #168]	; (80036d0 <xPortStartScheduler+0xd8>)
 8003628:	2207      	movs	r2, #7
 800362a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800362c:	e009      	b.n	8003642 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800362e:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <xPortStartScheduler+0xd8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3b01      	subs	r3, #1
 8003634:	4a26      	ldr	r2, [pc, #152]	; (80036d0 <xPortStartScheduler+0xd8>)
 8003636:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	b2db      	uxtb	r3, r3
 8003640:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d0ef      	beq.n	800362e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <xPortStartScheduler+0xd8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1c3 0307 	rsb	r3, r3, #7
 8003656:	2b04      	cmp	r3, #4
 8003658:	d00a      	beq.n	8003670 <xPortStartScheduler+0x78>
	__asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	60bb      	str	r3, [r7, #8]
}
 800366c:	bf00      	nop
 800366e:	e7fe      	b.n	800366e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003670:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <xPortStartScheduler+0xd8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <xPortStartScheduler+0xd8>)
 8003678:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <xPortStartScheduler+0xd8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003682:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <xPortStartScheduler+0xd8>)
 8003684:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <xPortStartScheduler+0xdc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <xPortStartScheduler+0xdc>)
 8003694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003698:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <xPortStartScheduler+0xdc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <xPortStartScheduler+0xdc>)
 80036a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036a6:	f000 f8b9 	bl	800381c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <xPortStartScheduler+0xe0>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036b0:	f7ff ff92 	bl	80035d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80036b4:	f7ff fbca 	bl	8002e4c <vTaskSwitchContext>
	prvTaskExitError();
 80036b8:	f7ff ff48 	bl	800354c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	e000e400 	.word	0xe000e400
 80036cc:	200004e4 	.word	0x200004e4
 80036d0:	200004e8 	.word	0x200004e8
 80036d4:	e000ed20 	.word	0xe000ed20
 80036d8:	2000000c 	.word	0x2000000c

080036dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	607b      	str	r3, [r7, #4]
}
 80036f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <vPortEnterCritical+0x58>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3301      	adds	r3, #1
 80036fc:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <vPortEnterCritical+0x58>)
 80036fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <vPortEnterCritical+0x58>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d10f      	bne.n	8003728 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <vPortEnterCritical+0x5c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <vPortEnterCritical+0x4c>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	603b      	str	r3, [r7, #0]
}
 8003724:	bf00      	nop
 8003726:	e7fe      	b.n	8003726 <vPortEnterCritical+0x4a>
	}
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	2000000c 	.word	0x2000000c
 8003738:	e000ed04 	.word	0xe000ed04

0800373c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <vPortExitCritical+0x4c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <vPortExitCritical+0x24>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	607b      	str	r3, [r7, #4]
}
 800375c:	bf00      	nop
 800375e:	e7fe      	b.n	800375e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <vPortExitCritical+0x4c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3b01      	subs	r3, #1
 8003766:	4a08      	ldr	r2, [pc, #32]	; (8003788 <vPortExitCritical+0x4c>)
 8003768:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <vPortExitCritical+0x4c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <vPortExitCritical+0x42>
 8003772:	2300      	movs	r3, #0
 8003774:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800377c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	2000000c 	.word	0x2000000c
 800378c:	00000000 	.word	0x00000000

08003790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003790:	f3ef 8009 	mrs	r0, PSP
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <pxCurrentTCBConst>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037a0:	6010      	str	r0, [r2, #0]
 80037a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80037a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037aa:	f380 8811 	msr	BASEPRI, r0
 80037ae:	f7ff fb4d 	bl	8002e4c <vTaskSwitchContext>
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f380 8811 	msr	BASEPRI, r0
 80037ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80037be:	6819      	ldr	r1, [r3, #0]
 80037c0:	6808      	ldr	r0, [r1, #0]
 80037c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037c6:	f380 8809 	msr	PSP, r0
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	4770      	bx	lr

080037d0 <pxCurrentTCBConst>:
 80037d0:	200003b8 	.word	0x200003b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop

080037d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	607b      	str	r3, [r7, #4]
}
 80037f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037f2:	f7ff fa6d 	bl	8002cd0 <xTaskIncrementTick>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <SysTick_Handler+0x40>)
 80037fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f383 8811 	msr	BASEPRI, r3
}
 800380e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003820:	4b0a      	ldr	r3, [pc, #40]	; (800384c <vPortSetupTimerInterrupt+0x30>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <vPortSetupTimerInterrupt+0x34>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800382c:	4b09      	ldr	r3, [pc, #36]	; (8003854 <vPortSetupTimerInterrupt+0x38>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a09      	ldr	r2, [pc, #36]	; (8003858 <vPortSetupTimerInterrupt+0x3c>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	099b      	lsrs	r3, r3, #6
 8003838:	4a08      	ldr	r2, [pc, #32]	; (800385c <vPortSetupTimerInterrupt+0x40>)
 800383a:	3b01      	subs	r3, #1
 800383c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800383e:	4b03      	ldr	r3, [pc, #12]	; (800384c <vPortSetupTimerInterrupt+0x30>)
 8003840:	2207      	movs	r2, #7
 8003842:	601a      	str	r2, [r3, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	e000e010 	.word	0xe000e010
 8003850:	e000e018 	.word	0xe000e018
 8003854:	20000000 	.word	0x20000000
 8003858:	10624dd3 	.word	0x10624dd3
 800385c:	e000e014 	.word	0xe000e014

08003860 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800386c:	f7ff f986 	bl	8002b7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003870:	4b58      	ldr	r3, [pc, #352]	; (80039d4 <pvPortMalloc+0x174>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003878:	f000 f910 	bl	8003a9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800387c:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <pvPortMalloc+0x178>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 808e 	bne.w	80039a6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01d      	beq.n	80038cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003890:	2208      	movs	r2, #8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d014      	beq.n	80038cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f023 0307 	bic.w	r3, r3, #7
 80038a8:	3308      	adds	r3, #8
 80038aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <pvPortMalloc+0x6c>
	__asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	617b      	str	r3, [r7, #20]
}
 80038c8:	bf00      	nop
 80038ca:	e7fe      	b.n	80038ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d069      	beq.n	80039a6 <pvPortMalloc+0x146>
 80038d2:	4b42      	ldr	r3, [pc, #264]	; (80039dc <pvPortMalloc+0x17c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d864      	bhi.n	80039a6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038dc:	4b40      	ldr	r3, [pc, #256]	; (80039e0 <pvPortMalloc+0x180>)
 80038de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80038e0:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <pvPortMalloc+0x180>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038e6:	e004      	b.n	80038f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d903      	bls.n	8003904 <pvPortMalloc+0xa4>
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f1      	bne.n	80038e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003904:	4b33      	ldr	r3, [pc, #204]	; (80039d4 <pvPortMalloc+0x174>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390a:	429a      	cmp	r2, r3
 800390c:	d04b      	beq.n	80039a6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2208      	movs	r2, #8
 8003914:	4413      	add	r3, r2
 8003916:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	1ad2      	subs	r2, r2, r3
 8003928:	2308      	movs	r3, #8
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	429a      	cmp	r2, r3
 800392e:	d91f      	bls.n	8003970 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <pvPortMalloc+0xf8>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	613b      	str	r3, [r7, #16]
}
 8003954:	bf00      	nop
 8003956:	e7fe      	b.n	8003956 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	1ad2      	subs	r2, r2, r3
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800396a:	69b8      	ldr	r0, [r7, #24]
 800396c:	f000 f8f8 	bl	8003b60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <pvPortMalloc+0x17c>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <pvPortMalloc+0x17c>)
 800397c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <pvPortMalloc+0x17c>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <pvPortMalloc+0x184>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d203      	bcs.n	8003992 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <pvPortMalloc+0x17c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <pvPortMalloc+0x184>)
 8003990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <pvPortMalloc+0x178>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	431a      	orrs	r2, r3
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039a6:	f7ff f8f7 	bl	8002b98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <pvPortMalloc+0x16a>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	60fb      	str	r3, [r7, #12]
}
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <pvPortMalloc+0x168>
	return pvReturn;
 80039ca:	69fb      	ldr	r3, [r7, #28]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200010f4 	.word	0x200010f4
 80039d8:	20001100 	.word	0x20001100
 80039dc:	200010f8 	.word	0x200010f8
 80039e0:	200010ec 	.word	0x200010ec
 80039e4:	200010fc 	.word	0x200010fc

080039e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d048      	beq.n	8003a8c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80039fa:	2308      	movs	r3, #8
 80039fc:	425b      	negs	r3, r3
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4413      	add	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <vPortFree+0xac>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <vPortFree+0x44>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	60fb      	str	r3, [r7, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	e7fe      	b.n	8003a2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <vPortFree+0x62>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	60bb      	str	r3, [r7, #8]
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <vPortFree+0xac>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d019      	beq.n	8003a8c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d115      	bne.n	8003a8c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <vPortFree+0xac>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a70:	f7ff f884 	bl	8002b7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <vPortFree+0xb0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	4a06      	ldr	r2, [pc, #24]	; (8003a98 <vPortFree+0xb0>)
 8003a80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a82:	6938      	ldr	r0, [r7, #16]
 8003a84:	f000 f86c 	bl	8003b60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003a88:	f7ff f886 	bl	8002b98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a8c:	bf00      	nop
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20001100 	.word	0x20001100
 8003a98:	200010f8 	.word	0x200010f8

08003a9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003aa2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003aa6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003aa8:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <prvHeapInit+0xac>)
 8003aaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3307      	adds	r3, #7
 8003aba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0307 	bic.w	r3, r3, #7
 8003ac2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	4a1f      	ldr	r2, [pc, #124]	; (8003b48 <prvHeapInit+0xac>)
 8003acc:	4413      	add	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <prvHeapInit+0xb0>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ada:	4b1c      	ldr	r3, [pc, #112]	; (8003b4c <prvHeapInit+0xb0>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ae8:	2208      	movs	r2, #8
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0307 	bic.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <prvHeapInit+0xb4>)
 8003afc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003afe:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <prvHeapInit+0xb4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2200      	movs	r2, #0
 8003b04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <prvHeapInit+0xb4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	1ad2      	subs	r2, r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <prvHeapInit+0xb4>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <prvHeapInit+0xb8>)
 8003b2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <prvHeapInit+0xbc>)
 8003b32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b34:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <prvHeapInit+0xc0>)
 8003b36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b3a:	601a      	str	r2, [r3, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	200004ec 	.word	0x200004ec
 8003b4c:	200010ec 	.word	0x200010ec
 8003b50:	200010f4 	.word	0x200010f4
 8003b54:	200010fc 	.word	0x200010fc
 8003b58:	200010f8 	.word	0x200010f8
 8003b5c:	20001100 	.word	0x20001100

08003b60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b68:	4b27      	ldr	r3, [pc, #156]	; (8003c08 <prvInsertBlockIntoFreeList+0xa8>)
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e002      	b.n	8003b74 <prvInsertBlockIntoFreeList+0x14>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d8f7      	bhi.n	8003b6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	4413      	add	r3, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d108      	bne.n	8003ba2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	441a      	add	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	441a      	add	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d118      	bne.n	8003be8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <prvInsertBlockIntoFreeList+0xac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d00d      	beq.n	8003bde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	441a      	add	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e008      	b.n	8003bf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <prvInsertBlockIntoFreeList+0xac>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e003      	b.n	8003bf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d002      	beq.n	8003bfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	200010ec 	.word	0x200010ec
 8003c0c:	200010f4 	.word	0x200010f4

08003c10 <memset>:
 8003c10:	4603      	mov	r3, r0
 8003c12:	4402      	add	r2, r0
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d100      	bne.n	8003c1a <memset+0xa>
 8003c18:	4770      	bx	lr
 8003c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c1e:	e7f9      	b.n	8003c14 <memset+0x4>

08003c20 <strncat>:
 8003c20:	b530      	push	{r4, r5, lr}
 8003c22:	4604      	mov	r4, r0
 8003c24:	7825      	ldrb	r5, [r4, #0]
 8003c26:	4623      	mov	r3, r4
 8003c28:	3401      	adds	r4, #1
 8003c2a:	2d00      	cmp	r5, #0
 8003c2c:	d1fa      	bne.n	8003c24 <strncat+0x4>
 8003c2e:	3a01      	subs	r2, #1
 8003c30:	d304      	bcc.n	8003c3c <strncat+0x1c>
 8003c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c36:	f803 4b01 	strb.w	r4, [r3], #1
 8003c3a:	b904      	cbnz	r4, 8003c3e <strncat+0x1e>
 8003c3c:	bd30      	pop	{r4, r5, pc}
 8003c3e:	2a00      	cmp	r2, #0
 8003c40:	d1f5      	bne.n	8003c2e <strncat+0xe>
 8003c42:	701a      	strb	r2, [r3, #0]
 8003c44:	e7f3      	b.n	8003c2e <strncat+0xe>
	...

08003c48 <_reclaim_reent>:
 8003c48:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <_reclaim_reent+0xa8>)
 8003c4a:	b570      	push	{r4, r5, r6, lr}
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4604      	mov	r4, r0
 8003c50:	4283      	cmp	r3, r0
 8003c52:	d04b      	beq.n	8003cec <_reclaim_reent+0xa4>
 8003c54:	69c3      	ldr	r3, [r0, #28]
 8003c56:	b143      	cbz	r3, 8003c6a <_reclaim_reent+0x22>
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d144      	bne.n	8003ce8 <_reclaim_reent+0xa0>
 8003c5e:	69e3      	ldr	r3, [r4, #28]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	b111      	cbz	r1, 8003c6a <_reclaim_reent+0x22>
 8003c64:	4620      	mov	r0, r4
 8003c66:	f000 f879 	bl	8003d5c <_free_r>
 8003c6a:	6961      	ldr	r1, [r4, #20]
 8003c6c:	b111      	cbz	r1, 8003c74 <_reclaim_reent+0x2c>
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f000 f874 	bl	8003d5c <_free_r>
 8003c74:	69e1      	ldr	r1, [r4, #28]
 8003c76:	b111      	cbz	r1, 8003c7e <_reclaim_reent+0x36>
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f000 f86f 	bl	8003d5c <_free_r>
 8003c7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c80:	b111      	cbz	r1, 8003c88 <_reclaim_reent+0x40>
 8003c82:	4620      	mov	r0, r4
 8003c84:	f000 f86a 	bl	8003d5c <_free_r>
 8003c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c8a:	b111      	cbz	r1, 8003c92 <_reclaim_reent+0x4a>
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f000 f865 	bl	8003d5c <_free_r>
 8003c92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003c94:	b111      	cbz	r1, 8003c9c <_reclaim_reent+0x54>
 8003c96:	4620      	mov	r0, r4
 8003c98:	f000 f860 	bl	8003d5c <_free_r>
 8003c9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003c9e:	b111      	cbz	r1, 8003ca6 <_reclaim_reent+0x5e>
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 f85b 	bl	8003d5c <_free_r>
 8003ca6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003ca8:	b111      	cbz	r1, 8003cb0 <_reclaim_reent+0x68>
 8003caa:	4620      	mov	r0, r4
 8003cac:	f000 f856 	bl	8003d5c <_free_r>
 8003cb0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003cb2:	b111      	cbz	r1, 8003cba <_reclaim_reent+0x72>
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f000 f851 	bl	8003d5c <_free_r>
 8003cba:	6a23      	ldr	r3, [r4, #32]
 8003cbc:	b1b3      	cbz	r3, 8003cec <_reclaim_reent+0xa4>
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003cc4:	4718      	bx	r3
 8003cc6:	5949      	ldr	r1, [r1, r5]
 8003cc8:	b941      	cbnz	r1, 8003cdc <_reclaim_reent+0x94>
 8003cca:	3504      	adds	r5, #4
 8003ccc:	69e3      	ldr	r3, [r4, #28]
 8003cce:	2d80      	cmp	r5, #128	; 0x80
 8003cd0:	68d9      	ldr	r1, [r3, #12]
 8003cd2:	d1f8      	bne.n	8003cc6 <_reclaim_reent+0x7e>
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f000 f841 	bl	8003d5c <_free_r>
 8003cda:	e7c0      	b.n	8003c5e <_reclaim_reent+0x16>
 8003cdc:	680e      	ldr	r6, [r1, #0]
 8003cde:	4620      	mov	r0, r4
 8003ce0:	f000 f83c 	bl	8003d5c <_free_r>
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	e7ef      	b.n	8003cc8 <_reclaim_reent+0x80>
 8003ce8:	2500      	movs	r5, #0
 8003cea:	e7ef      	b.n	8003ccc <_reclaim_reent+0x84>
 8003cec:	bd70      	pop	{r4, r5, r6, pc}
 8003cee:	bf00      	nop
 8003cf0:	2000005c 	.word	0x2000005c

08003cf4 <__libc_init_array>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	4d0c      	ldr	r5, [pc, #48]	; (8003d2c <__libc_init_array+0x38>)
 8003cfa:	4c0d      	ldr	r4, [pc, #52]	; (8003d30 <__libc_init_array+0x3c>)
 8003cfc:	1b64      	subs	r4, r4, r5
 8003cfe:	10a4      	asrs	r4, r4, #2
 8003d00:	42a6      	cmp	r6, r4
 8003d02:	d109      	bne.n	8003d18 <__libc_init_array+0x24>
 8003d04:	f000 f87e 	bl	8003e04 <_init>
 8003d08:	2600      	movs	r6, #0
 8003d0a:	4d0a      	ldr	r5, [pc, #40]	; (8003d34 <__libc_init_array+0x40>)
 8003d0c:	4c0a      	ldr	r4, [pc, #40]	; (8003d38 <__libc_init_array+0x44>)
 8003d0e:	1b64      	subs	r4, r4, r5
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	42a6      	cmp	r6, r4
 8003d14:	d105      	bne.n	8003d22 <__libc_init_array+0x2e>
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1c:	4798      	blx	r3
 8003d1e:	3601      	adds	r6, #1
 8003d20:	e7ee      	b.n	8003d00 <__libc_init_array+0xc>
 8003d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d26:	4798      	blx	r3
 8003d28:	3601      	adds	r6, #1
 8003d2a:	e7f2      	b.n	8003d12 <__libc_init_array+0x1e>
 8003d2c:	08003e84 	.word	0x08003e84
 8003d30:	08003e84 	.word	0x08003e84
 8003d34:	08003e84 	.word	0x08003e84
 8003d38:	08003e88 	.word	0x08003e88

08003d3c <__retarget_lock_acquire_recursive>:
 8003d3c:	4770      	bx	lr

08003d3e <__retarget_lock_release_recursive>:
 8003d3e:	4770      	bx	lr

08003d40 <memcpy>:
 8003d40:	440a      	add	r2, r1
 8003d42:	4291      	cmp	r1, r2
 8003d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d48:	d100      	bne.n	8003d4c <memcpy+0xc>
 8003d4a:	4770      	bx	lr
 8003d4c:	b510      	push	{r4, lr}
 8003d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d52:	4291      	cmp	r1, r2
 8003d54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d58:	d1f9      	bne.n	8003d4e <memcpy+0xe>
 8003d5a:	bd10      	pop	{r4, pc}

08003d5c <_free_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4605      	mov	r5, r0
 8003d60:	2900      	cmp	r1, #0
 8003d62:	d040      	beq.n	8003de6 <_free_r+0x8a>
 8003d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d68:	1f0c      	subs	r4, r1, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfb8      	it	lt
 8003d6e:	18e4      	addlt	r4, r4, r3
 8003d70:	f000 f83c 	bl	8003dec <__malloc_lock>
 8003d74:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <_free_r+0x8c>)
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	b933      	cbnz	r3, 8003d88 <_free_r+0x2c>
 8003d7a:	6063      	str	r3, [r4, #4]
 8003d7c:	6014      	str	r4, [r2, #0]
 8003d7e:	4628      	mov	r0, r5
 8003d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d84:	f000 b838 	b.w	8003df8 <__malloc_unlock>
 8003d88:	42a3      	cmp	r3, r4
 8003d8a:	d908      	bls.n	8003d9e <_free_r+0x42>
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	1821      	adds	r1, r4, r0
 8003d90:	428b      	cmp	r3, r1
 8003d92:	bf01      	itttt	eq
 8003d94:	6819      	ldreq	r1, [r3, #0]
 8003d96:	685b      	ldreq	r3, [r3, #4]
 8003d98:	1809      	addeq	r1, r1, r0
 8003d9a:	6021      	streq	r1, [r4, #0]
 8003d9c:	e7ed      	b.n	8003d7a <_free_r+0x1e>
 8003d9e:	461a      	mov	r2, r3
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	b10b      	cbz	r3, 8003da8 <_free_r+0x4c>
 8003da4:	42a3      	cmp	r3, r4
 8003da6:	d9fa      	bls.n	8003d9e <_free_r+0x42>
 8003da8:	6811      	ldr	r1, [r2, #0]
 8003daa:	1850      	adds	r0, r2, r1
 8003dac:	42a0      	cmp	r0, r4
 8003dae:	d10b      	bne.n	8003dc8 <_free_r+0x6c>
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	4401      	add	r1, r0
 8003db4:	1850      	adds	r0, r2, r1
 8003db6:	4283      	cmp	r3, r0
 8003db8:	6011      	str	r1, [r2, #0]
 8003dba:	d1e0      	bne.n	8003d7e <_free_r+0x22>
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4408      	add	r0, r1
 8003dc2:	6010      	str	r0, [r2, #0]
 8003dc4:	6053      	str	r3, [r2, #4]
 8003dc6:	e7da      	b.n	8003d7e <_free_r+0x22>
 8003dc8:	d902      	bls.n	8003dd0 <_free_r+0x74>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	e7d6      	b.n	8003d7e <_free_r+0x22>
 8003dd0:	6820      	ldr	r0, [r4, #0]
 8003dd2:	1821      	adds	r1, r4, r0
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	bf01      	itttt	eq
 8003dd8:	6819      	ldreq	r1, [r3, #0]
 8003dda:	685b      	ldreq	r3, [r3, #4]
 8003ddc:	1809      	addeq	r1, r1, r0
 8003dde:	6021      	streq	r1, [r4, #0]
 8003de0:	6063      	str	r3, [r4, #4]
 8003de2:	6054      	str	r4, [r2, #4]
 8003de4:	e7cb      	b.n	8003d7e <_free_r+0x22>
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
 8003de8:	20001240 	.word	0x20001240

08003dec <__malloc_lock>:
 8003dec:	4801      	ldr	r0, [pc, #4]	; (8003df4 <__malloc_lock+0x8>)
 8003dee:	f7ff bfa5 	b.w	8003d3c <__retarget_lock_acquire_recursive>
 8003df2:	bf00      	nop
 8003df4:	2000123c 	.word	0x2000123c

08003df8 <__malloc_unlock>:
 8003df8:	4801      	ldr	r0, [pc, #4]	; (8003e00 <__malloc_unlock+0x8>)
 8003dfa:	f7ff bfa0 	b.w	8003d3e <__retarget_lock_release_recursive>
 8003dfe:	bf00      	nop
 8003e00:	2000123c 	.word	0x2000123c

08003e04 <_init>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	bf00      	nop
 8003e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0a:	bc08      	pop	{r3}
 8003e0c:	469e      	mov	lr, r3
 8003e0e:	4770      	bx	lr

08003e10 <_fini>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	bf00      	nop
 8003e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e16:	bc08      	pop	{r3}
 8003e18:	469e      	mov	lr, r3
 8003e1a:	4770      	bx	lr
